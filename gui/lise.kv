# This file is part of LiSE, a framework for life simulation games.
# Copyright (c) 2013 Zachary Spector,  zacharyspector@gmail.com

#: import solarized gui.style.solarized
<Swatch>:
    text_size: (self.width, self.height * 0.9)
    halign: 'center'
    multiline: True
    BoxLayout:
        pos: root.pos
        size: root.size
        Image:
            texture: root.display_texture
            pos_hint: {'top': 0.9}
            size_hint: (0.9, 0.5)
<LoadImgDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)
<PickImgDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        SwatchBox:
            id: imgchooser
            texdict: root.closet.texturedict
            cols: 5
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Confirm"
                on_release: root.set_imgs(imgchooser.gen_selection())
<DummyPawn>:
    size_hint: (None, None)
    do_rotation: False
    do_scale: False
<Pawn>:
    auto_bring_to_front: False
    size_hint: (None, None)
    size: self.textures[0].size if len(self.textures) > 0 else (0, 0)
    do_rotation: False
    do_scale: False
    interactivity: self.board.closet.skeleton[u"pawn_interactive"][unicode(self.board)][unicode(self.thing)]
    imagery: self.board.closet.skeleton[u"pawn_img"][unicode(self.board)][unicode(self.thing)]
<PawnImage>:
    texture: self.pawn.textures[self.layer]
    size: self.pawn.size
<Spot>:
    size_hint: (None, None)
    coords: self.board.closet.skeleton[u"spot_coords"][unicode(self.board)][unicode(self.place)]
    interactivity: self.board.closet.skeleton[u"spot_interactive"][unicode(self.board)][unicode(self.place)]
    imagery: self.board.closet.skeleton[u"spot_img"][unicode(self.board)][unicode(self.place)]
    tex: self.get_texture()
    do_scale: False
    Image:
        id: img
        texture: root.tex
        size: root.size
        pos: (0, 0)
<ColorBox>:
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            pos: self.pos
            size: self.size
<Cell>:
    size_hint: (None, None)
    ColorBox:
        color: solarized["base2"]
    Label:
        text: root.text
        color: solarized["base00"]
        text_size: root.size
        pos_hint: {'x': 0, 'y': 0}
        valign: "top"
<CalendarLayout>:
    size: cal.size
    StencilView:
        Calendar:
            id: cal
            timeline: tl
            character: root.character
            cal_type: root.item_type
            keys: root.keys
            col_width: 100
            branches_wide: 2
            tick_height: 2
            spacing_x: 5
            spacing_y: 5
            editing: root.edbut.state == 'down' if root.edbut else False
            width: self.branches_wide * (self.col_width + self.spacing_x)
            height: self.tick_height * self.ticks_tall
            on_branch: tl.upd_branch
            on_tick: tl.upd_tick
        Timeline:
            id: tl
            canvas:
                Color:
                    rgba: 1, 0, 0, 1
                Line:
                    points: (self.x, self.y, self.x+cal.col_width, self.y)
                Triangle:
                    points: (self.x, self.y+8, self.x+16, self.y, self.x, self.y-8)
<TableHeader>:
    canvas:
        Color:
            rgba: solarized["base02"]
        Rectangle:
            pos: root.pos
            size: root.size
    Label:
        id: lb
        size: self.texture_size
        bold: True
        color: solarized["base00"]
        text: root.text
<TableTextInput>:
    background_disabled_active: ''
    background_disabled_normal: ''
    background_normal: ''
    background_active: ''
    border: [0, 0, 0, 0]
    multiline: False
    text: getattr(self.bone, self.key)
    height: self.font_size
    size_hint_x: 1
    disabled: self.table.edbut.state == 'normal'
<TableLayout>:
    Table:
        #:import bone gui.charsheet.table.character_bone
        id: tab
        skel: bone(self, root.keys, getattr(root.character, root.chardictd[root.item_type]))
        col_default_width: 75
        edbut: root.edbut
        padding: [0, 0, 0, 0]
        spacing: [5, 2]
        colkeys: root.colkey_dict[root.item_type]
        cols: len(self.colkeys)
        iter_skeleton: root.iterskel_dict[root.item_type](root.keys, root.character, self.skel)
        x: root.x + self.xmov
        y: root.y
<TableTextInput>:
    background_color: solarized["base3"]
    foreground_color: solarized["base01"]
    disabled_foreground_color: solarized["base00"]
<EditButton>:
    font_name: 'assets/Entypo.ttf'
    font_size: 32
    size_hint_x: 0.2
<CharSheetView>:
    pos_hint: {'x': self.character.closet.skeleton[u"charsheet"][unicode(self.character)].x_hint, 'y': self.character.closet.skeleton[u"charsheet"][unicode(self.character)].y_hint}
    size_hint: (self.character.closet.skeleton[u"charsheet"][unicode(self.character)].w_hint, self.character.closet.skeleton[u"charsheet"][unicode(self.character)].h_hint)
    scroll_type: 'bars'
    bar_side_y: 'left'
    CharSheet:
        id: sheet
        size_hint: (1, None)
        width: root.width
        character: root.character
        cols: 2
        spacing: 10
        cols_minimum: {0: self.width - 32 - self.spacing[0], 1: 32}
<Menu>:
    orientation: 'vertical'
    spacing: 10
    size_hint: (0.1, 1)
<MenuButton>:
    font_name: 'assets/Entypo.ttf' if self.symbolic else 'DroidSans'
    font_size: 30 if self.symbolic else 20
<CueCard>:
    disabled: True
    pos_hint: {'x': 0.1, 'top': 1}
    size_hint: (None, None)
    size: (400, 26)
    font_size: 20
