<Pawn>:
    auto_bring_to_front: False
    size_hint: (None, None)
    interactivity: self.board.closet.skeleton[u"pawn_interactive"][unicode(self.board)][unicode(self.thing)]
    imagery: self.board.closet.skeleton[u"pawn_img"][unicode(self.board)][unicode(self.thing)]
    tex: self.get_texture()
    Image:
        id: img
        texture: root.tex
        size: root.size
        pos: (0, 0)
<Spot>:
    size_hint: (None, None)
    coords: self.board.closet.skeleton[u"spot_coords"][unicode(self.board)][unicode(self.place)]
    interactivity: self.board.closet.skeleton[u"spot_interactive"][unicode(self.board)][unicode(self.place)]
    imagery: self.board.closet.skeleton[u"spot_img"][unicode(self.board)][unicode(self.place)]
    tex: self.get_texture()
    Image:
        id: img
        texture: root.tex
        size: root.size
        pos: (0, 0)
<ColorBox>:
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            pos: self.pos
            size: self.size
<Cell>:
    size_hint: (None, None)
    ColorBox:
        color: root.bg_color_active if root.active else root.bg_color_inactive
    Label:
        text: root.text
        color: root.text_color_active if root.active else root.text_color_inactive
        font_name: root.font_name
        font_size: root.font_size
        text_size: root.size
        pos_hint: {'x': 0, 'y': 0}
        valign: "top"
<CalendarView>:
    id: view
    Calendar:
        id: cal
        cal_type: root.item_type - 5
        col_width: self.width / self.branches_wide - self.spacing_x
        keys: root.keys
        font_name: root.style.fontface
        font_size: root.style.fontsize
        bg_color_inactive: root.style.bg_inactive.rgba
        bg_color_active: root.style.bg_active.rgba
        text_color_inactive: root.style.text_inactive.rgba
        text_color_active: root.style.text_active.rgba
        editing: root.edbut.state == 'down' if root.edbut else False
        size: view.size
        pos: view.pos
    Timeline:
        x: cal.x + (root.character.closet.kivy_connector.branch - cal.branch) * cal.col_width + cal.xmov
        y: cal.ymov + cal.top - (root.character.closet.kivy_connector.tick - cal.tick) * cal.tick_height
        canvas:
            Color:
                rgba: 1, 0, 0, 1
            Line:
                points: (self.x, self.y, self.x+cal.col_width, self.y)
            Triangle:
                points: (self.x, self.y+8, self.x+16, self.y, self.x, self.y-8)
<TableHeader>:
    canvas:
        Color:
            rgba: root.table.bg_color_inactive
        Rectangle:
            pos: root.pos
            size: root.size
    Label:
        id: lb
        font_name: root.table.font_name
        font_size: root.table.font_size
        size: self.texture_size
        bold: True
        color: root.table.text_color_active
        text: root.text
<TableTextInput>:
    foreground_color: self.table.text_color_active
    disabled_foreground_color: self.table.text_color_inactive
    background_color: self.table.bg_color_active
    disabled_background_color: self.table.bg_color_inactive
    background_normal: ''
    background_active: ''
    background_disabled_normal: ''
    background_disabled_active: ''
    border: [0, 0, 0, 0]
    padding: [0, 0, 0, 0]
    multiline: False
    text: self.rd[self.key]
<TableView>:
    id: view
    character_skel: getattr(self.character, self.chardictd[self.item_type])
    Table:
        #:import bone gui.charsheet.table.character_bone
        id: tab
        skel: bone(self, root.keys, root.character_skel)
        bg_color_active: root.style.bg_active.rgba
        bg_color_inactive: root.style.bg_inactive.rgba
        fg_color_active: root.style.fg_active.rgba
        fg_color_inactive: root.style.fg_inactive.rgba
        text_color_active: root.style.text_active.rgba
        text_color_inactive: root.style.text_inactive.rgba
        padding: [0, 0, 0, 0]
        spacing: [5, 2]
        font_name: root.style.fontface
        font_size: root.style.fontsize
        colkeys: root.colkey_dict[root.item_type]
        cols: len(self.colkeys)
        iter_skeleton: root.iterskel_dict[root.item_type](root.keys, root.character, self.skel)
        editing: root.edbut.state == 'down' if root.edbut else False
        size: view.size
        pos: view.pos
<PawnImage>:
    size_hint: (None, None)
    texture: self.character.closet.get_texture(self.character.closet.get_present_bone(self.character.closet.skeleton[u"pawn_img"][self.keys[0]][self.keys[1]])[u"img"])
<SpotImage>:
    size_hint: (None, None)
    texture: self.character.closet.get_texture(self.character.closet.get_present_bone(self.character.closet.skeleton[u"spot_img"][self.keys[0]][self.keys[1]])[u"img"])
<EditButton>:
    font_name: 'assets/Entypo.ttf'
    font_size: 32
    size_hint_x: 0.2
<CharSheet>:
    pos_hint: {'right': 1, 'y': 0}
    size_hint: (0.5, 1)
    cols: 2
    spacing: 10
    cols_minimum: {0: self.width - 42, 1: 32}