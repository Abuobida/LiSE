# This file is part of LiSE, a framework for life simulation games.
# Copyright (c) 2013-2014 Zachary Spector,  zacharyspector@gmail.com
#: import StiffScrollEffect ELiDE.kivygarden.stiffscroll.StiffScrollEffect
#: import MirrorMapping ELiDE.remote.MirrorMapping
#: import resource_find kivy.resources.resource_find
<ELiDELayout>:
    character: self.engine.character[self.character_name] if self.engine and self.character_name else None
    dummies: [dummything, dummyplace]
    grabbing: self.grabbed is None
    ScrollView:
        id: boardview
        effect_cls: StiffScrollEffect
        size_hint: (0.85, 0.9)
        pos_hint: {'x': 0.2, 'top': 1}
        Board:
            id: board
            selection: root.selection
            branch: root.branch
            tick: root.tick
            character: root.character
            arrowlayout: arrowlayout
            spotlayout: spotlayout
            pawnlayout: pawnlayout
            size_hint: (None, None)
            size: wallpaper.size
            arrowhead_size: 10
            Image:
                id: wallpaper
                source: root.character['_wallpaper'] if '_wallpaper' in root.character else resource_find('wallpape.jpg')
                size_hint: (None, None)
                size: self.texture_size
            FloatLayout:
                id: arrowlayout
            FloatLayout:
                id: spotlayout
            Widget:
                id: pawnlayout
    BoxLayout:
        orientation: 'vertical'
        pos_hint: {'left': 0, 'top': 1}
        size_hint: (0.2, 0.9)
        Label:
            id: stathead
            size_hint_y: 0.05
            text: str(root.character_name) if root.selection is None else str(root.selection.name)
        StatListView:
            id: charsheet
            remote: root.selected_remote
            size_hint_y: 0.95
            time: root.time
            set_value: lambda k, v: root.set_remote_value(self.remote, k, v)
        Button:
            id: cfgstatbut
            size_hint_y: 0.07
            text: 'cfg'
            on_press: root.toggle_stat_cfg()
    BoxLayout:
        id: timemenu
        pos_hint: {'bot': 0}
        size_hint: (0.85, 0.1)
        orientation: 'horizontal'
        ToggleButton:
            font_name: 'Symbola.ttf'
            font_size: 50
            text: chr(0x25b6)
        BoxLayout:
            orientation: 'vertical'
            Label:
                font_name: 'Symbola.ttf'
                text: ''.join((chr(0x25b6), chr(0x25ae)))
            BoxLayout:
                orientation: 'horizontal'
                Button:
                    text: 'Tick'
                    on_press: root.next_tick()
                Button:
                    text: 'Rule'
                    on_press: root.advance()
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Branch'
            MenuTextInput:
                setter: root.set_branch
                hint_text: root.branch
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Tick'
            MenuIntInput:
                setter: root.set_tick
                hint_text: str(root.tick)
    BoxLayout:
        id: charmenu
        orientation: 'vertical'
        size_hint_x: 0.1
        pos_hint: {'right': 1}
        Button:
            id: charchangebut
            halign: "center"
            text: str(root.character_name)
        Button:
            text: "Rules"
        SymbolButton:
            text: chr(0x2327)
            on_press: root.delete_selection()
        BoxLayout:
            Widget:
                id: placetab
                Dummy:
                    id: dummyplace
                    center: placetab.center
                    prefix: 'place'
                    on_pos_up: root.spot_from_dummy(self)
            Button:
                id: placecfgbut
                text: 'cfg'
                on_press: root.toggle_spot_config()
        BoxLayout:
            orientation: 'vertical'
            ToggleButton:
                id: portaladdbut
                Widget:
                    id: emptyleft
                    center_x: portaladdbut.x + portaladdbut.width / 3
                    center_y: portaladdbut.center_y
                    size: (0, 0)
                Widget:
                    id: emptyright
                    center_x: portaladdbut.right - portaladdbut.width / 3
                    center_y: portaladdbut.center_y
                    size: (0, 0)
                ArrowWidget:
                    board: board
                    origin: emptyleft
                    destination: emptyright
            Button:
                id: portaldirbut
                text: 'One-way' if root.reciprocal_portal else 'Two-way'
                on_press: root.toggle_reciprocal()
        BoxLayout:
            Widget:
                id: thingtab
                Dummy:
                    id: dummything
                    center: thingtab.center
                    prefix: 'thing'
                    on_pos_up: root.pawn_from_dummy(self)
            Button:
                id: thingcfgbut
                text: 'cfg'
                on_press: root.toggle_pawn_config()