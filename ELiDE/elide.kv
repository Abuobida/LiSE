# This file is part of LiSE, a framework for life simulation games.
# Copyright (c) 2013-2014 Zachary Spector,  zacharyspector@gmail.com
#: import StiffScrollEffect ELiDE.kivygarden.stiffscroll.StiffScrollEffect
#: import MirrorMapping ELiDE.remote.MirrorMapping
#: import resource_find kivy.resources.resource_find
<ELiDELayout>:
    engine: self.app.engine
    board: board
    dummies: [dummything, dummyplace]
    grabbing: self.grabbed is None
    ScrollView:
        id: boardview
        effect_cls: StiffScrollEffect
        size_hint: (0.85, 0.9)
        pos_hint: {'x': 0.2, 'top': 1}
        Board:
            id: board
            layout: root
            selection: root.selection
            app: root.app
            engine: root.app.engine
            character: root.app.engine.character[root.app.config['ELiDE']['boardchar']]
            arrowlayout: arrowlayout
            spotlayout: spotlayout
            pawnlayout: pawnlayout
            size_hint: (None, None)
            size: wallpaper.size
            arrowhead_size: 10
            Image:
                id: wallpaper
                source: root.app.config['ELiDE']['wallpaper']
                size_hint: (None, None)
                size: self.texture_size
            FloatLayout:
                id: arrowlayout
            FloatLayout:
                id: spotlayout
            Widget:
                id: pawnlayout
    BoxLayout:
        orientation: 'vertical'
        pos_hint: {'left': 0, 'top': 1}
        size_hint: (0.2, 0.9)
        Label:
            size_hint_y: 0.05
            text: str(board.character.name) if board.character and root.selection is None else str(root.selection.name) if root.selection else ''
        StatListView:
            id: charsheet
            size_hint_y: 0.95
            time: root.time
            remote: {} if board.character is None else board.character.stat if root.selection is None else root.selection.thing if hasattr(root.selection, 'thing') else root.selection.place if hasattr(root.selection, 'place') else root.selection.portal if hasattr(root.selection, 'portal') else {}
        BoxLayout:
            size_hint_y: 0.07
            TextInput:
                id: newstatkey
                hint_text: 'Name'
            TextInput:
                id: newstatval
                hint_text: 'Value'
        Button:
            id: addstatbut
            size_hint_y: 0.07
            text: '+'
            font_size: 50
            on_press: root.set_stat()
    BoxLayout:
        id: timemenu
        pos_hint: {'bot': 0}
        size_hint: (0.85, 0.1)
        orientation: 'horizontal'
        ToggleButton:
            font_name: 'Symbola.ttf'
            font_size: 50
            text: chr(0x25b6)
        BoxLayout:
            orientation: 'vertical'
            Label:
                font_name: 'Symbola.ttf'
                text: ''.join((chr(0x25b6), chr(0x25ae)))
            BoxLayout:
                orientation: 'horizontal'
                Button:
                    text: 'Tick'
                    on_press: root.next_tick()
                Button:
                    text: 'Rule'
                    on_press: root.advance()
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Branch'
            MenuTextInput:
                setter: root.set_branch
                hint_text: root.branch
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: 'Tick'
            MenuIntInput:
                setter: root.set_tick
                hint_text: str(root.tick)
    BoxLayout:
        id: charmenu
        orientation: 'vertical'
        size_hint_x: 0.1
        pos_hint: {'right': 1}
        Button:
            halign: "center"
            # click this to change the active character
            text: 'Character:\n' + root.app.config['ELiDE']['boardchar']
        Button:
            # opens a popover where you view the rules active on this
            # character now, and may click one to edit it
            text: "Rules"
        SymbolButton:
            # deletes whatever you've got selected
            text: chr(0x2327)
            on_press: root.delete_selection()
        BoxLayout:
            Widget:
                id: placetab
                Dummy:
                    id: dummyplace
                    center: placetab.center
                    prefix: 'place'
                    on_pos_up: root.spot_from_dummy(self)
            Button:
                id: placecfgbut
                text: 'cfg'
                on_press: root.toggle_spot_config()
        BoxLayout:
            orientation: 'vertical'
            ToggleButton:
                # While this is active, dragging between two spots creates a portal
                id: portaladdbut
                ArrowWidget:
                    board: board
                    origin: emptyleft
                    destination: emptyright
                    Widget:
                        id: emptyleft
                        center_x: portaladdbut.x + portaladdbut.width / 3
                        center_y: portaladdbut.center_y
                        size: (0, 0)
                    Widget:
                        id: emptyright
                        center_x: portaladdbut.right - portaladdbut.width / 3
                        center_y: portaladdbut.center_y
                        size: (0, 0)
            Button:
                id: portaldirbut
                text: 'One-way' if root.reciprocal_portal else 'Two-way'
                on_press: root.toggle_reciprocal()
        BoxLayout:
            # Has the generic thing-graphic in it, drag it on top of a spot and you get a new thing
            Widget:
                id: thingtab
                # canvas:
                #     Color:
                #         rgba: 0,0,0,1
                #     Rectangle:
                #         pos: thingtab.pos
                #         size: thingtab.size
                #     Color:
                #         rgba: 1,1,1,1
                Dummy:
                    id: dummything
                    center: thingtab.center
                    prefix: 'thing'
                    on_pos_up: root.pawn_from_dummy(self)
            Button:
                id: thingcfgbut
                text: 'cfg'
                on_press: root.toggle_pawn_config()