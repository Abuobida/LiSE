{
    "allbranch": "SELECT branches.branch, branches.parent, branches.parent_rev \nFROM branches ORDER BY branches.branch",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch VARCHAR(50) NOT NULL, \n\tparent VARCHAR(50) NOT NULL, \n\tparent_rev INTEGER NOT NULL, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, orig, dest, idx, \"key\", branch, rev), \n\tFOREIGN KEY(graph, orig, dest, idx) REFERENCES edges (graph, orig, dest, idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, orig, dest, idx, branch, rev), \n\tFOREIGN KEY(graph, orig) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, dest) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\")\n)\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"key\", branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph VARCHAR(50) NOT NULL, \n\ttype VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, node, \"key\", branch, rev), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, node, branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "ctbranch": "SELECT COUNT(branches.branch) AS \"COUNT_1\" \nFROM branches \nWHERE branches.branch = ?",
    "ctglobal": "SELECT COUNT(global.\"key\") AS \"COUNT_1\" \nFROM global",
    "ctgraph": "SELECT COUNT(graphs.graph) AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?",
    "del_edge_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_node_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "edge_exist_ins": "INSERT OR REPLACE INTO edges (graph, orig, dest, idx, branch, rev, extant) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "edge_exist_upd": "UPDATE edges SET extant=? WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev = ?",
    "edge_val_dump": "SELECT edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.rev, edge_val.value \nFROM edge_val ORDER BY edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.branch, edge_val.rev, edge_val.\"key\"",
    "edge_val_ins": "INSERT OR REPLACE INTO edge_val (graph, orig, dest, idx, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "edge_val_upd": "UPDATE edge_val SET value=? WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev = ?",
    "edges_dump": "SELECT edges.graph, edges.orig, edges.dest, edges.idx, edges.branch, edges.rev, edges.extant \nFROM edges ORDER BY edges.graph, edges.branch, edges.rev, edges.orig, edges.dest, edges.idx",
    "exist_node_ins": "INSERT OR REPLACE INTO nodes (graph, node, branch, rev, extant) VALUES (?, ?, ?, ?, ?)",
    "exist_node_upd": "UPDATE nodes SET extant=? WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev = ?",
    "global_del": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_ins": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_items": "SELECT global.\"key\", global.value \nFROM global",
    "global_upd": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.rev, graph_val.value \nFROM graph_val ORDER BY graph_val.graph, graph_val.branch, graph_val.rev, graph_val.\"key\"",
    "graph_val_ins": "INSERT OR REPLACE INTO graph_val (graph, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?)",
    "graph_val_upd": "UPDATE graph_val SET value=? WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev = ?",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "index_edge_val_time": "CREATE INDEX edge_val_time_idx ON edge_val (graph, orig, dest, idx, branch, rev)",
    "index_edges_time": "CREATE INDEX edges_time_idx ON edges (graph, branch, rev)",
    "index_graph_val_time": "CREATE INDEX graph_val_time_idx ON graph_val (graph, branch, rev)",
    "index_node_val_time": "CREATE INDEX node_val_time_idx ON node_val (graph, node, branch, rev)",
    "index_nodes_time": "CREATE INDEX nodes_time_idx ON nodes (graph, branch, rev)",
    "new_branch": "INSERT INTO branches (branch, parent, parent_rev) VALUES (?, ?, ?)",
    "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.rev, node_val.value \nFROM node_val ORDER BY node_val.graph, node_val.node, node_val.branch, node_val.rev, node_val.\"key\"",
    "node_val_ins": "INSERT OR REPLACE INTO node_val (graph, node, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?)",
    "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.rev, nodes.extant \nFROM nodes ORDER BY nodes.graph, nodes.branch, nodes.rev, nodes.node",
    "parparrev": "SELECT branches.parent, branches.parent_rev \nFROM branches \nWHERE branches.branch = ?",
    "parrev": "SELECT branches.parent_rev \nFROM branches \nWHERE branches.branch = ?"
}
