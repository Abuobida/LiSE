* Programming interface
** branch, tick [2014-04-30 Wed]
   Every function that depends on the current diegetic time should
   pull it from the closet. That means no functions but those in the
   ORM should take (branch, tick) as parameters.
* Graphical interface
** verbs
*** build characters
**** place places (w. spots)
**** place things (w. pawns)
**** pick graphics for spots and pawns
**** connect portals (w. arrows)
**** apply stats
***** to places
***** to things
***** to portals
***** to the whole character
*** build facades
    The initial creation of a Facade is done separately from everything
    to do with the characters involved, but later, if you are viewing
    the observed character through the facade, the actions that would
    normally alter the observed character may alter the Facade instead.
**** pick any 2 characters
**** pick a type
     A good selection of Facade types will be crucial.

     There should be some decent descriptive text for each of them. It
     should mention whatever will change about the rest of the user
     interface when this Facade type is active.

     There should be other, redundant indicators too.
**** any extra config for a particular Facade subclass
     I suppose there should be a property on the subclasses with some
     extra kv in a string. Or else a callback that adds extra widgets
     to whatever's passed in.
*** build events
    Actually this is mostly done in Python but you can wire events
    together, associate different causes
*** control time
**** by punching in numbers
**** by a slider on one of the various timelines
     So that it's easy to rewind time to when your health was full, for
     instance.
** nouns
*** the map
    A graph with stuff on top. It's graphical and skinnable so you can
    make it look like the 2D worldmap from more o less any game that
    has such a thing.

    You can drag things about on top of places, drag places about just
    to make them look better, and connect and disconnect portals.

    Right clicking or long pressing anything brings up its pop-up profile.
*** pop-up profiles
    Display stats to do with one particular Thing, Place, or Portal.

    You can add, change, and delete stats here. You can't do that
    anywhere else--but any other place a stat is referenced, there
    should be a shortcut to get you here.
*** the hand
**** cards
***** with image
***** without
**** arrange cards manually or automatically
**** push cards aside to provide a drop zone
*** character sheet
    Only one of it, only for the current Character. Displays every
    single variable in the character -- well, everything the Facade
    lets you see, anyway -- but gives special prominence to the parts
    that you couldn't get at via the pop-up profiles.
* AI
  Taking a page from... er, someone's *description of* Renderware AI
** Perception
   Some ways to automagically construct and maintain graphs
   representing a character's *perception of* the gameworld, rather
   than the model that the game resolves conflicts with.
** Decision
   Algorithms acting on those perception graphs. Often this is just
   pathfinding--though it may operate on a graph representing
   *possible world states as perceived by the character*, with each
   node on the graph containing a perception graph of its own. At that
   point you're doing dynamic programming.
** Action
   The bit that executes the plans made by the decision part, and
   perhaps makes small adjustments to those plans when the world
   changes but not so much that you have to start over. Some
   roadblocks may be bypassed by just waiting for them to go away, for
   instance.
* database
** DONE change loaders so they can handle the case where you try to load something that doesn't exist
** schema changes
*** [2014-04-15 Tue]
    While building the character sheet widget I noticed a discrepancy
    between the widget and the data model it was supposed to
    represent. You had to add things to the widget independently of
    adding them to the world, yet things were always in characters,
    regardless of whether they were in that character's widget.

    At first I tried responding by rewriting the widget. Probably
    needed to happen anyway because it was getting bloated. The idea
    was to rewrite it so it was just a view onto a character, perhaps
    filtered by a facade. But then I looked into the data model and
    wondered why I needed everything part of a character anyway.

    Characters are where graphs live, and everything that has a
    location, has it in a graph. Those were my assumptions...though,
    originally, graphs were separate from characters. They were called
    "dimensions," remember that? I stopped using them because I'd
    thought of a way to do without the distinction between a dimension
    and a character. I still think it's good to do without if I can.

    So these "character sheets," what do they show, exactly? Facades?
    The idea with facades was to let you see someone or something
    *from a particular point of view*. I'd done that by having one
    character look at another character and generate data about them
    based on whatever code, filtering what's in the observed
    character. That approach would still work if things and places and
    portals weren't inherently parts of characters, just grouped that
    way by your code.

    If characters aren't in the data model, and it's just dimensions
    full of things, places, and portals... well, that's even simpler,
    isn't it? Characters become SELECT, facades become WHERE, sort
    of. I could still cache the stuff that's in a character in any
    given tick. But it would no longer be a defining part of anything.
*** Character centric model
    Everything's part of exactly one Character, though possibly
    located in another.

    Characters act as namespaces and perhaps also fulfill the role of
    objects, per OOP.
**** Advantages
     Permanent namespaces where you only code within one character
     might be convenient...

     Fewer distinct entities in the data model to keep track of.
**** Disadvantages
     Permanent namespaces are also limiting: think of how to transfer
     part of one person's inventory to another.

     Difficult to iterate over all the things located in a given
     character but not *part of* that character.

     Kind of confusing to distinguish "located in" from "part of".
*** Dimension centric model
    Dimensions are graphs. The nodes are Places. The edges are
    Portals. Things move about on top.

    Characters collect some of those every tick. Facades mess up
    Characters into what somebody actually sees.
**** Advantages
     More customizable.

     More convenient when you don't care about subjectivity.
**** Disadvantages
     Fewer integrity constraints; more opportunities to get confused
     as to what's in a character.

     Recording what's in a character at every tick, while implementing
     foreign key constraints for the lot of it, means about double the
     number of distinct tables.

     If I *don't* record what's in a character every tick, and instead
     query the underlying dimension every tick, that means requerying
     every time I review the same tick. Makes it pretty important to
     optimize that query.
** ORM
   In orm.py mostly. Note there is no actual *class* called "ORM".
** associating characters with parts of other characters
   Right now characters are subsets of the data model that don't
   overlap. To a point, this is appropriate, since one character's
   skill tree isn't another character's, etc

   But characters can sometimes stand next to one another and have a
   conversation, and in that case they are each represented by Things
   in some other Character. I'd like to somehow model the fact that a
   Thing represents a Character it isn't inside of.

   Actually, if characters are connected in a social graph, a
   character could be represented by a place or portal, too.

   I suppose I'll call the thing, place, or portal that represents a
   character an "avatar".

   It's easy to simply keep a list of items all throughout the data
   model that represent a particular character. But: should that list
   have (branch, tick) in the key, like most of the data model does?
   No, I think it would be sufficient to delete the item that
   represents the character. I can't think of a situation where it'd
   be useful to make the item stop representing the character, yet
   continue to exist.
* Features stolen from Kudos 2
*** the social web display
*** the kudos bar
*** Significant Others
*** smallish menu of "good ideas"
But not restricted to stuff you've "unlocked," just stuff you *know
about* and which your character considers sensible.

Actually this should just be a sorting priority for the action inventory.
* Features stolen from Redshirt
*** the *navigable* social web display
*** feeds of character activities
**** per character
**** per location
**** text mode
     Calendar mode also. Redshirt doesn't have that!
* Features stolen from Dwarf Fortress
* Gameplay cycle
Depending on how many characters you control, and how far each will
obey your instructions, it might be an rpg or a time/resource mgmt
sim. In either case you collect resource and skill so you can learn of
new opportunities to get more resource and skill. The middle-term
objectives, possibly "missions," mostly involve raising some stat to
some threshold, whether it's money, exp, or coolness. Any time a stat
has an effect on the world, it will also (sometimes only) modify other
stats that the player should be concerned with.

Sometimes you're actually trying to instantiate some new entity into
the world, for which you need to sacrifice some other entity, or one
of its stats. This makes a compelling kind of objective because
creation has similar effects on the world model to exploration, yet is
under player control. I'll pay special attention to enabling strange
and unusual crafting systems. Like maybe you can craft entire
cities. Abstraction is wonderful for that kind of thing.

* Time model
** Branch
   A branch is a sequence of ticks. Branches are indexed
   like lists, with the index assigned as the branch is
   created--there's no need for branches created later on to be
   "later" in the time model than any other branch.

   Each branch has a start tick and a parent branch, the lone
   exception being branch 0, which starts at tick 0 and has no parent
   branch.

   Branches can contain no random outcomes--so when there is a random
   outcome, a new branch is created, which *assumes* that particular
   outcome. This remains true when there are multiple random outcomes
   in a single tick: as each random effect is resolved, a new branch
   is created to account for it, and so long as it isn't the *last*
   random effect of the tick, the new branch will only contain one
   tick.

   For the time model's purposes, there is no distinction between a
   random outcome and a player's choice. Either will cause a new
   branch to be created. The random number or player input that
   resulted in the branch's creation will be recorded in the branch's
   header.
** Tick
   A tick is an atomic unit of time. Everything that happens in a tick
   is "simultaneous," although effects will nonetheless be resolved in a
   deterministic order.

   You might say that ticks "contain" effects from many branches, but
   not really. Ticks and branches are more like axes on a Cartesian
   plane: you use the two of them together to identify when you want
   something.
* demo game
  Dungeon University proper seems too big, so adopt an ant's eye view
  of it. Works something like Redshirt but instead of jobs-per-se you
  have classes to take. Or teach. Not honestly sure which would be
  easier to implement.
