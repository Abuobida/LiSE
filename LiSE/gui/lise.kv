# This file is part of LiSE, a framework for life simulation games.
# Copyright (c) 2013 Zachary Spector,  zacharyspector@gmail.com

#: import solarized LiSE.gui.style.solarized
<TogSwatch,FrobSwatch>:
    text_size: (self.width, self.height * 0.9)
    halign: 'center'
    multiline: True
    BoxLayout:
        pos: root.pos
        size: root.size
        Image:
            texture: root.display_texture
            pos_hint: {'top': 0.9}
            size_hint: (0.9, 0.5)
<LoadImgDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)
<PickImgDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        SwatchBox:
            id: picker
            cols: 1
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Confirm"
                on_release: root.set_imgs(picker.selection)
<DummyPawn>:
    size_hint: (None, None)
    do_rotation: False
    do_scale: False
<Pawn>:
    auto_bring_to_front: False
    size_hint: (None, None)
    size: pile.size
    do_rotation: False
    do_scale: False
    LayerTexPile:
        id: pile
        closet: root.board.facade.closet
        imagery: self.closet.skeleton[u"pawn"][unicode(root.board.facade.observer)][unicode(root.thing.character)][unicode(root.board.host)][unicode(root.thing)]
<TexPile>:
    width: max([img.right for img in self.imgs]) if len(self.imgs) > 0 else 0
    height: max([img.top for img in self.imgs]) if len(self.imgs) > 0 else 0
<Spot>:
    size_hint: (None, None)
    size: pile.size
    do_rotation: False
    do_scale: False
    auto_bring_to_front: False
    LayerTexPile:
        id: pile
        closet: root.board.facade.closet
        imagery: root.board.facade.closet.skeleton[u"spot"][unicode(root.board.facade.observer)][unicode(root.board.host)][unicode(root.place)]
<ColorBox>:
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            pos: self.pos
            size: self.size
<Cell>:
    size_hint: (None, None)
    ColorBox:
        color: solarized["base2"]
    Label:
        text: root.text
        color: solarized["base00"]
        text_size: root.size
        pos_hint: {'x': 0, 'y': 0}
        valign: "top"
<CalendarLayout>:
    size: cal.size
    StencilView:
        Calendar:
            id: cal
            timeline: tl
            character: root.character
            cal_type: root.item_type
            keys: root.keys
            col_width: 100
            branches_wide: 2
            tick_height: 2
            spacing_x: 5
            spacing_y: 5
            editing: root.edbut.state == 'down' if root.edbut else False
            width: self.branches_wide * (self.col_width + self.spacing_x)
            height: self.tick_height * self.ticks_tall
            on_branch: tl.upd_branch
            on_tick: tl.upd_tick
        Timeline:
            id: tl
            canvas:
                Color:
                    rgba: 1, 0, 0, 1
                Line:
                    points: (self.x, self.y, self.x+cal.col_width, self.y)
                Triangle:
                    points: (self.x, self.y+8, self.x+16, self.y, self.x, self.y-8)
<TableHeader>:
    canvas:
        Color:
            rgba: solarized["base02"]
        Rectangle:
            pos: root.pos
            size: root.size
    Label:
        id: lb
        size: self.texture_size
        bold: True
        color: solarized["base00"]
        text: root.text
<TableTextInput>:
    background_disabled_active: ''
    background_disabled_normal: ''
    background_normal: ''
    background_active: ''
    border: [0, 0, 0, 0]
    multiline: False
    text: getattr(self.bone, self.key)
    height: self.font_size
    size_hint_x: 1
    disabled: self.table.edbut.state == 'normal'
<TableLayout>:
    Table:
        #:import bone LiSE.gui.charsheet.table.character_bone
        id: tab
        col_default_width: 75
        edbut: root.edbut
        padding: [0, 0, 0, 0]
        spacing: [5, 2]
        colkeys: root.colkey_dict[root.item_type]
        cols: len(self.colkeys)
        iter_skeleton: root.character.iter_hosted_thing_loc_bones
        x: root.x + self.xmov
        y: root.y
<TableTextInput>:
    background_color: solarized["base3"]
    foreground_color: solarized["base01"]
    disabled_foreground_color: solarized["base00"]
<EditButton>:
    #:import sep os.sep
    font_name: sep.join([self.parent.character.closet.lisepath, "gui", "assets", "Entypo.ttf"]) if self.parent else ""
    font_size: 32
    size_hint_x: 0.2
<CueCard>:
    Label:
        id: l
        text_size: root.size
        color: solarized["base0"]
        pos: root.pos
        size: root.size
        halign: 'center'
        valign: 'middle'
        canvas.before:
            Color:
                rgba: solarized["base02"]
            Rectangle:
                pos: l.pos
                size: l.size
<Board>:
    auto_bring_to_front: False
<MenuIntInput>:
    padding: [12, 12, 12, 0]
    font_size: 26
<SpotMenuContent>:
    id: spotmenu
    TextInput:
        id: namer
        hint_text: "Enter a unique name"
        size_hint: (1, None)
        multiline: False
        height: self.line_height * 2
    TogSwatch:
        box: spotmenu
        display_texture: root.layout.app.closet.get_texture(u"default_spot")
        img: root.layout.app.closet.skeleton[u"img"][u"default_spot"]
        text: "Use default image"
        group: "spotmenu"
        size_hint_y: None
    TogSwatch:
        box: spotmenu
        display_texture: root.layout.app.closet.get_texture(u"crossroad")
        img_tags: ['?pixel_city']
        text: "Build with PixelCity"
        group: "spotmenu"
        size_hint_y: None
    BoxLayout:
        size_hint_y: None
        height: 30
        Button:
            text: 'Cancel'
            on_release: root.cancel()
        Button:
            text: 'Confirm'
            on_release: root.confirm()
<LiSELayout>:
    Board:
        id: board
        facade: root.app.closet.get_character(root.app.observed_name).get_facade(root.app.closet.get_character(root.app.observer_name))
        host: root.app.closet.get_character(root.app.host_name)
    CueCard:
        id: prompt
        closet: root.app.closet
        pos_hint: {'x': 0.1, 'top': 1}
        size_hint: (None, None)
        size: (400, 26)
    CharSheetView:
        id: csview
        pos_hint: {'x': 0.7, 'y': 0.0}
        size_hint: (0.3, 1.0)
        scroll_type: ['bars']
        bar_pos_y: 'left'
        CharSheet:
            id: charsheet
            size_hint: (1, None)
            width: csview.width
            character: root.app.closet.get_character(root.app.observed_name)
            cols: 2
            spacing: 10
            cols_minimum: {0: self.width - 32 - self.spacing[0], 1: 32}
    BoxLayout:
        id: menu
        size_hint: (0.1, 1)
        orientation: 'vertical'
        spacing: 10
        MenuButton:
            closet: root.app.closet
            stringname: '@place_menu'
            fun: root.show_spot_menu
        MenuButton:
            closet: root.app.closet
            stringname: '@portal_menu'
            fun: root.make_arrow
        MenuButton:
            closet: root.app.closet
            stringname: '@thing_menu'
            fun: root.show_pawn_picker
            arg: ['base', 'body']
        MenuButton:
            closet: root.app.closet
            symbolic: True
            stringname: '@play'
            fun: root.normal_speed
        MenuButton:
            closet: root.app.closet
            symbolic: True
            stringname: '@reverse'
            fun: root.normal_speed
            arg: False
        MenuButton:
            closet: root.app.closet
            symbolic: True
            stringname: '@pause'
            fun: root.pause
        CueCard:
            closet: root.app.closet
            stringname: '@branch:'
        MenuIntInput:
            closet: root.app.closet
            stringname: '@branch'
            fun: root.go_to_branch
        CueCard:
            closet: root.app.closet
            stringname: '@tick:'
        MenuIntInput:
            closet: root.app.closet
            stringname: '@tick'
            fun: root.go_to_tick
