{
    "allbranch": "SELECT branches.branch, branches.parent, branches.parent_rev \nFROM branches ORDER BY branches.branch",
    "allrules": "SELECT rules.rule \nFROM rules",
    "avatar_ins": "INSERT INTO avatars (character_graph, avatar_graph, avatar_node, branch, tick, is_avatar) VALUES (?, ?, ?, ?, ?, ?)",
    "avatar_upd": "UPDATE avatars SET is_avatar=? WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.tick = ?",
    "avatars_ever": "SELECT avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.tick, avatars.is_avatar \nFROM avatars \nWHERE avatars.character_graph = ?",
    "branch_children": "SELECT branches.branch \nFROM branches \nWHERE branches.parent = ?",
    "char_stat_branch_data": "SELECT graph_val.\"key\", graph_val.rev, graph_val.value \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ?",
    "character_ins": "INSERT INTO characters (character, character_rulebook, avatar_rulebook, character_thing_rulebook, character_place_rulebook, character_portal_rulebook) VALUES (?, ?, ?, ?, ?, ?)",
    "character_rulebook": "SELECT characters.character_rulebook \nFROM characters \nWHERE characters.character = ?",
    "character_rulebooks": "SELECT characters.character_rulebook, characters.avatar_rulebook, characters.character_thing_rulebook, characters.character_place_rulebook, characters.character_portal_rulebook \nFROM characters \nWHERE characters.character = ?",
    "characters": "SELECT characters.character \nFROM characters",
    "characters_rulebooks": "SELECT characters.character, characters.character_rulebook, characters.avatar_rulebook, characters.character_thing_rulebook, characters.character_place_rulebook, characters.character_portal_rulebook \nFROM characters",
    "count_all_active_rules": "SELECT count(rulebook) AS tbl_row_count \nFROM (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.date AS date, active_rules.contributor AS contributor, active_rules.description AS description, active_rules.active AS active \nFROM active_rules)",
    "count_all_avatar_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT avatar_rules_handled.character AS character, avatar_rules_handled.rulebook AS rulebook, avatar_rules_handled.rule AS rule, avatar_rules_handled.graph AS graph, avatar_rules_handled.avatar AS avatar, avatar_rules_handled.branch AS branch, avatar_rules_handled.tick AS tick \nFROM avatar_rules_handled)",
    "count_all_avatars": "SELECT count(character_graph) AS tbl_row_count \nFROM (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, avatars.tick AS tick, avatars.date AS date, avatars.contributor AS contributor, avatars.description AS description, avatars.is_avatar AS is_avatar \nFROM avatars)",
    "count_all_branches": "SELECT count(branch) AS tbl_row_count \nFROM (SELECT branches.branch AS branch, branches.date AS date, branches.creator AS creator, branches.description AS description, branches.parent AS parent, branches.parent_rev AS parent_rev \nFROM branches)",
    "count_all_character_place_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_place_rules_handled.character AS character, character_place_rules_handled.rulebook AS rulebook, character_place_rules_handled.place AS place, character_place_rules_handled.rule AS rule, character_place_rules_handled.branch AS branch, character_place_rules_handled.tick AS tick \nFROM character_place_rules_handled)",
    "count_all_character_portal_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_portal_rules_handled.character AS character, character_portal_rules_handled.rulebook AS rulebook, character_portal_rules_handled.\"nodeA\" AS \"nodeA\", character_portal_rules_handled.\"nodeB\" AS \"nodeB\", character_portal_rules_handled.idx AS idx, character_portal_rules_handled.rule AS rule, character_portal_rules_handled.branch AS branch, character_portal_rules_handled.tick AS tick \nFROM character_portal_rules_handled)",
    "count_all_character_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_rules_handled.character AS character, character_rules_handled.rulebook AS rulebook, character_rules_handled.rule AS rule, character_rules_handled.branch AS branch, character_rules_handled.tick AS tick \nFROM character_rules_handled)",
    "count_all_character_thing_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_thing_rules_handled.character AS character, character_thing_rules_handled.rulebook AS rulebook, character_thing_rules_handled.thing AS thing, character_thing_rules_handled.rule AS rule, character_thing_rules_handled.branch AS branch, character_thing_rules_handled.tick AS tick \nFROM character_thing_rules_handled)",
    "count_all_characters": "SELECT count(character) AS tbl_row_count \nFROM (SELECT characters.character AS character, characters.date AS date, characters.creator AS creator, characters.description AS description, characters.character_rulebook AS character_rulebook, characters.avatar_rulebook AS avatar_rulebook, characters.character_thing_rulebook AS character_thing_rulebook, characters.character_place_rulebook AS character_place_rulebook, characters.character_portal_rulebook AS character_portal_rulebook \nFROM characters)",
    "count_all_edge_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, edge_val.rev AS rev, edge_val.date AS date, edge_val.contributor AS contributor, edge_val.description AS description, edge_val.value AS value \nFROM edge_val)",
    "count_all_edges": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, edges.rev AS rev, edges.date AS date, edges.creator AS creator, edges.description AS description, edges.extant AS extant \nFROM edges)",
    "count_all_global": "SELECT count(\"key\") AS tbl_row_count \nFROM (SELECT global.\"key\" AS \"key\", global.date AS date, global.creator AS creator, global.description AS description, global.value AS value \nFROM global)",
    "count_all_graph_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, graph_val.rev AS rev, graph_val.date AS date, graph_val.contributor AS contributor, graph_val.description AS description, graph_val.value AS value \nFROM graph_val)",
    "count_all_graphs": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT graphs.graph AS graph, graphs.date AS date, graphs.creator AS creator, graphs.description AS description, graphs.type AS type \nFROM graphs)",
    "count_all_node_rulebook": "SELECT count(character) AS tbl_row_count \nFROM (SELECT node_rulebook.character AS character, node_rulebook.node AS node, node_rulebook.date AS date, node_rulebook.contributor AS contributor, node_rulebook.description AS description, node_rulebook.rulebook AS rulebook \nFROM node_rulebook)",
    "count_all_node_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT node_val.graph AS graph, node_val.node AS node, node_val.\"key\" AS \"key\", node_val.branch AS branch, node_val.rev AS rev, node_val.date AS date, node_val.contributor AS contributor, node_val.description AS description, node_val.value AS value \nFROM node_val)",
    "count_all_nodes": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, nodes.rev AS rev, nodes.date AS date, nodes.creator AS creator, nodes.description AS description, nodes.extant AS extant \nFROM nodes)",
    "count_all_place_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT place_rules_handled.character AS character, place_rules_handled.rulebook AS rulebook, place_rules_handled.place AS place, place_rules_handled.rule AS rule, place_rules_handled.branch AS branch, place_rules_handled.tick AS tick \nFROM place_rules_handled)",
    "count_all_portal_rulebook": "SELECT count(character) AS tbl_row_count \nFROM (SELECT portal_rulebook.character AS character, portal_rulebook.\"nodeA\" AS \"nodeA\", portal_rulebook.\"nodeB\" AS \"nodeB\", portal_rulebook.idx AS idx, portal_rulebook.date AS date, portal_rulebook.contributor AS contributor, portal_rulebook.description AS description, portal_rulebook.rulebook AS rulebook \nFROM portal_rulebook)",
    "count_all_portal_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT portal_rules_handled.character AS character, portal_rules_handled.rulebook AS rulebook, portal_rules_handled.\"nodeA\" AS \"nodeA\", portal_rules_handled.\"nodeB\" AS \"nodeB\", portal_rules_handled.idx AS idx, portal_rules_handled.rule AS rule, portal_rules_handled.branch AS branch, portal_rules_handled.tick AS tick \nFROM portal_rules_handled)",
    "count_all_rule_actions": "SELECT count(rule) AS tbl_row_count \nFROM (SELECT rule_actions.rule AS rule, rule_actions.idx AS idx, rule_actions.action AS action \nFROM rule_actions)",
    "count_all_rule_prereqs": "SELECT count(rule) AS tbl_row_count \nFROM (SELECT rule_prereqs.rule AS rule, rule_prereqs.idx AS idx, rule_prereqs.prereq AS prereq \nFROM rule_prereqs)",
    "count_all_rule_triggers": "SELECT count(rule) AS tbl_row_count \nFROM (SELECT rule_triggers.rule AS rule, rule_triggers.idx AS idx, rule_triggers.\"trigger\" AS \"trigger\" \nFROM rule_triggers)",
    "count_all_rulebooks": "SELECT count(rulebook) AS tbl_row_count \nFROM (SELECT rulebooks.rulebook AS rulebook, rulebooks.idx AS idx, rulebooks.date AS date, rulebooks.contributor AS contributor, rulebooks.description AS description, rulebooks.rule AS rule \nFROM rulebooks)",
    "count_all_rules": "SELECT count(rule) AS tbl_row_count \nFROM (SELECT rules.rule AS rule, rules.date AS date, rules.creator AS creator, rules.description AS description \nFROM rules)",
    "count_all_senses": "SELECT count(character) AS tbl_row_count \nFROM (SELECT senses.character AS character, senses.sense AS sense, senses.branch AS branch, senses.tick AS tick, senses.date AS date, senses.contributor AS contributor, senses.description AS description, senses.function AS function, senses.active AS active \nFROM senses)",
    "count_all_thing_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT thing_rules_handled.character AS character, thing_rules_handled.rulebook AS rulebook, thing_rules_handled.thing AS thing, thing_rules_handled.rule AS rule, thing_rules_handled.branch AS branch, thing_rules_handled.tick AS tick \nFROM thing_rules_handled)",
    "count_all_things": "SELECT count(character) AS tbl_row_count \nFROM (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, things.tick AS tick, things.date AS date, things.contributor AS contributor, things.description AS description, things.location AS location, things.next_location AS next_location \nFROM things)",
    "count_all_universal": "SELECT count(\"key\") AS tbl_row_count \nFROM (SELECT universal.\"key\" AS \"key\", universal.branch AS branch, universal.tick AS tick, universal.date AS date, universal.creator AS creator, universal.description AS description, universal.value AS value \nFROM universal)",
    "create_active_rules": "\nCREATE TABLE active_rules (\n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tactive BOOLEAN, \n\tPRIMARY KEY (rulebook, rule, branch, tick), \n\tFOREIGN KEY(rulebook, rule) REFERENCES rulebooks (rulebook, rule), \n\tCHECK (active IN (0, 1))\n)\n\n",
    "create_avatar_rules_handled": "\nCREATE TABLE avatar_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tgraph VARCHAR(50) NOT NULL, \n\tavatar VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, graph, avatar, branch, tick)\n)\n\n",
    "create_avatars": "\nCREATE TABLE avatars (\n\tcharacter_graph VARCHAR(50) NOT NULL, \n\tavatar_graph VARCHAR(50) NOT NULL, \n\tavatar_node VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tis_avatar BOOLEAN, \n\tPRIMARY KEY (character_graph, avatar_graph, avatar_node, branch, tick), \n\tFOREIGN KEY(character_graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(avatar_graph, avatar_node) REFERENCES nodes (graph, node), \n\tCHECK (is_avatar IN (0, 1))\n)\n\n",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tparent VARCHAR(50), \n\tparent_rev INTEGER, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n",
    "create_character_place_rules_handled": "\nCREATE TABLE character_place_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tplace VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, place, rule, branch, tick)\n)\n\n",
    "create_character_portal_rules_handled": "\nCREATE TABLE character_portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, \"nodeA\", \"nodeB\", idx, rule, branch, tick)\n)\n\n",
    "create_character_rules_handled": "\nCREATE TABLE character_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick)\n)\n\n",
    "create_character_thing_rules_handled": "\nCREATE TABLE character_thing_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, thing, rule, branch, tick)\n)\n\n",
    "create_characters": "\nCREATE TABLE characters (\n\tcharacter VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tcharacter_rulebook VARCHAR(50) NOT NULL, \n\tavatar_rulebook VARCHAR(50) NOT NULL, \n\tcharacter_thing_rulebook VARCHAR(50) NOT NULL, \n\tcharacter_place_rulebook VARCHAR(50) NOT NULL, \n\tcharacter_portal_rulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(character_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(avatar_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_thing_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_place_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_portal_rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\", \"nodeB\", idx) REFERENCES edges (graph, \"nodeA\", \"nodeB\", idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, \"nodeB\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\")\n)\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"key\", branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\ttype VARCHAR(50), \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n",
    "create_node_rulebook": "\nCREATE TABLE node_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\trulebook VARCHAR(50), \n\tPRIMARY KEY (character, node), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, node, \"key\", branch, rev), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, node, branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_place_rules_handled": "\nCREATE TABLE place_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tplace VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, place, rule, branch, tick)\n)\n\n",
    "create_portal_rulebook": "\nCREATE TABLE portal_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\trulebook VARCHAR(50), \n\tPRIMARY KEY (character, \"nodeA\", \"nodeB\", idx), \n\tFOREIGN KEY(character, \"nodeA\", \"nodeB\", idx) REFERENCES edges (graph, \"nodeA\", \"nodeB\", idx)\n)\n\n",
    "create_portal_rules_handled": "\nCREATE TABLE portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, \"nodeA\", \"nodeB\", idx, rule, branch, tick)\n)\n\n",
    "create_rule_actions": "\nCREATE TABLE rule_actions (\n\trule VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\taction VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, idx), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_prereqs": "\nCREATE TABLE rule_prereqs (\n\trule VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tprereq VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, idx), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_triggers": "\nCREATE TABLE rule_triggers (\n\trule VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"trigger\" VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, idx), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rulebooks": "\nCREATE TABLE rulebooks (\n\trulebook VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\trule VARCHAR(50), \n\tPRIMARY KEY (rulebook, idx), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rules": "\nCREATE TABLE rules (\n\trule VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tPRIMARY KEY (rule)\n)\n\n",
    "create_senses": "\nCREATE TABLE senses (\n\tcharacter VARCHAR(50), \n\tsense VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tfunction VARCHAR(50), \n\tactive BOOLEAN, \n\tPRIMARY KEY (character, sense, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tCHECK (active IN (0, 1))\n)\n\n",
    "create_thing_rules_handled": "\nCREATE TABLE thing_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, thing, rule, branch, tick)\n)\n\n",
    "create_things": "\nCREATE TABLE things (\n\tcharacter VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tlocation VARCHAR(50), \n\tnext_location VARCHAR(50), \n\tPRIMARY KEY (character, thing, branch, tick), \n\tFOREIGN KEY(character, thing) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, location) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, next_location) REFERENCES nodes (graph, node)\n)\n\n",
    "create_universal": "\nCREATE TABLE universal (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\", branch, tick)\n)\n\n",
    "ct_character": "SELECT COUNT(characters.character) AS \"COUNT_1\" \nFROM characters \nWHERE characters.character = ?",
    "ct_characters": "SELECT COUNT(characters.character) AS \"COUNT_1\" \nFROM characters",
    "ct_rulebook_rules": "SELECT COUNT(rulebooks.rule) AS \"COUNT_1\" \nFROM rulebooks \nWHERE rulebooks.rulebook = ?",
    "ct_rulebooks": "SELECT COUNT(DISTINCT rulebooks.rulebook) AS \"COUNT_1\" \nFROM rulebooks",
    "ctbranch": "SELECT COUNT(branches.branch) AS \"COUNT_1\" \nFROM branches \nWHERE branches.branch = ?",
    "ctglobal": "SELECT COUNT(global.\"key\") AS \"COUNT_1\" \nFROM global",
    "ctgraph": "SELECT COUNT(graphs.graph) AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?",
    "ctrules": "SELECT COUNT() AS \"COUNT_1\" \nFROM rules",
    "del_edge_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_node_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "del_rule": "DELETE FROM rules WHERE rules.rule = ?",
    "dump_active_rules": "SELECT active_rules.rulebook, active_rules.rule, active_rules.branch, active_rules.tick, active_rules.date, active_rules.contributor, active_rules.description, active_rules.active \nFROM active_rules",
    "dump_avatar_rules_handled": "SELECT avatar_rules_handled.character, avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.graph, avatar_rules_handled.avatar, avatar_rules_handled.branch, avatar_rules_handled.tick \nFROM avatar_rules_handled",
    "dump_avatars": "SELECT avatars.character_graph, avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.tick, avatars.date, avatars.contributor, avatars.description, avatars.is_avatar \nFROM avatars",
    "dump_branches": "SELECT branches.branch, branches.date, branches.creator, branches.description, branches.parent, branches.parent_rev \nFROM branches",
    "dump_character_node_rules_handled": "SELECT character, rulebook, rule, node, branch, tick \nFROM (SELECT character_place_rules_handled.character AS character, character_place_rules_handled.rulebook AS rulebook, character_place_rules_handled.rule AS rule, character_place_rules_handled.place AS node, character_place_rules_handled.branch AS branch, character_place_rules_handled.tick AS tick \nFROM character_place_rules_handled UNION SELECT character_thing_rules_handled.character AS character, character_thing_rules_handled.rulebook AS rulebook, character_thing_rules_handled.rule AS rule, character_thing_rules_handled.thing AS node, character_thing_rules_handled.branch AS branch, character_thing_rules_handled.tick AS tick \nFROM character_thing_rules_handled)",
    "dump_character_place_rules_handled": "SELECT character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.place, character_place_rules_handled.rule, character_place_rules_handled.branch, character_place_rules_handled.tick \nFROM character_place_rules_handled",
    "dump_character_portal_rules_handled": "SELECT character_portal_rules_handled.character, character_portal_rules_handled.rulebook, character_portal_rules_handled.\"nodeA\", character_portal_rules_handled.\"nodeB\", character_portal_rules_handled.idx, character_portal_rules_handled.rule, character_portal_rules_handled.branch, character_portal_rules_handled.tick \nFROM character_portal_rules_handled",
    "dump_character_rules_handled": "SELECT character_rules_handled.character, character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, character_rules_handled.tick \nFROM character_rules_handled",
    "dump_character_thing_rules_handled": "SELECT character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.thing, character_thing_rules_handled.rule, character_thing_rules_handled.branch, character_thing_rules_handled.tick \nFROM character_thing_rules_handled",
    "dump_characters": "SELECT characters.character, characters.date, characters.creator, characters.description, characters.character_rulebook, characters.avatar_rulebook, characters.character_thing_rulebook, characters.character_place_rulebook, characters.character_portal_rulebook \nFROM characters",
    "dump_edge_val": "SELECT edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.rev, edge_val.date, edge_val.contributor, edge_val.description, edge_val.value \nFROM edge_val",
    "dump_edges": "SELECT edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch, edges.rev, edges.date, edges.creator, edges.description, edges.extant \nFROM edges",
    "dump_global": "SELECT global.\"key\", global.date, global.creator, global.description, global.value \nFROM global",
    "dump_graph_val": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.rev, graph_val.date, graph_val.contributor, graph_val.description, graph_val.value \nFROM graph_val",
    "dump_graphs": "SELECT graphs.graph, graphs.date, graphs.creator, graphs.description, graphs.type \nFROM graphs",
    "dump_node_rulebook": "SELECT node_rulebook.character, node_rulebook.node, node_rulebook.date, node_rulebook.contributor, node_rulebook.description, node_rulebook.rulebook \nFROM node_rulebook",
    "dump_node_val": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.rev, node_val.date, node_val.contributor, node_val.description, node_val.value \nFROM node_val",
    "dump_nodes": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.rev, nodes.date, nodes.creator, nodes.description, nodes.extant \nFROM nodes",
    "dump_place_rules_handled": "SELECT place_rules_handled.character, place_rules_handled.rulebook, place_rules_handled.place, place_rules_handled.rule, place_rules_handled.branch, place_rules_handled.tick \nFROM place_rules_handled",
    "dump_portal_rulebook": "SELECT portal_rulebook.character, portal_rulebook.\"nodeA\", portal_rulebook.\"nodeB\", portal_rulebook.idx, portal_rulebook.date, portal_rulebook.contributor, portal_rulebook.description, portal_rulebook.rulebook \nFROM portal_rulebook",
    "dump_portal_rules_handled": "SELECT portal_rules_handled.character, portal_rules_handled.rulebook, portal_rules_handled.\"nodeA\", portal_rules_handled.\"nodeB\", portal_rules_handled.idx, portal_rules_handled.rule, portal_rules_handled.branch, portal_rules_handled.tick \nFROM portal_rules_handled",
    "dump_rule_actions": "SELECT rule_actions.rule, rule_actions.idx, rule_actions.action \nFROM rule_actions",
    "dump_rule_prereqs": "SELECT rule_prereqs.rule, rule_prereqs.idx, rule_prereqs.prereq \nFROM rule_prereqs",
    "dump_rule_triggers": "SELECT rule_triggers.rule, rule_triggers.idx, rule_triggers.\"trigger\" \nFROM rule_triggers",
    "dump_rulebooks": "SELECT rulebooks.rulebook, rulebooks.idx, rulebooks.date, rulebooks.contributor, rulebooks.description, rulebooks.rule \nFROM rulebooks",
    "dump_rules": "SELECT rules.rule, rules.date, rules.creator, rules.description \nFROM rules",
    "dump_senses": "SELECT senses.character, senses.sense, senses.branch, senses.tick, senses.date, senses.contributor, senses.description, senses.function, senses.active \nFROM senses",
    "dump_thing_rules_handled": "SELECT thing_rules_handled.character, thing_rules_handled.rulebook, thing_rules_handled.thing, thing_rules_handled.rule, thing_rules_handled.branch, thing_rules_handled.tick \nFROM thing_rules_handled",
    "dump_things": "SELECT things.character, things.thing, things.branch, things.tick, things.date, things.contributor, things.description, things.location, things.next_location \nFROM things",
    "dump_universal": "SELECT universal.\"key\", universal.branch, universal.tick, universal.date, universal.creator, universal.description, universal.value \nFROM universal",
    "edge_exist_ins": "INSERT OR REPLACE INTO edges (graph, \"nodeA\", \"nodeB\", idx, branch, rev, extant) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "edge_exist_upd": "UPDATE edges SET extant=? WHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev = ?",
    "edge_exists": "SELECT edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "edge_stat_branch_data": "SELECT edge_val.\"key\", edge_val.rev, edge_val.value \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.branch = ?",
    "edge_val_dump": "SELECT edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.rev, edge_val.value \nFROM edge_val ORDER BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.branch, edge_val.rev, edge_val.\"key\"",
    "edge_val_get": "SELECT edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev",
    "edge_val_ins": "INSERT OR REPLACE INTO edge_val (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "edge_val_items": "SELECT edge_val.\"key\", edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev",
    "edge_val_upd": "UPDATE edge_val SET value=? WHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev = ?",
    "edges_dump": "SELECT edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch, edges.rev, edges.extant \nFROM edges ORDER BY edges.graph, edges.branch, edges.rev, edges.\"nodeA\", edges.\"nodeB\", edges.idx",
    "edges_extant": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "exist_node_ins": "INSERT OR REPLACE INTO nodes (graph, node, branch, rev, extant) VALUES (?, ?, ?, ?, ?)",
    "exist_node_upd": "UPDATE nodes SET extant=? WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev = ?",
    "global_del": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_ins": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_items": "SELECT global.\"key\", global.value \nFROM global",
    "global_upd": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.rev, graph_val.value \nFROM graph_val ORDER BY graph_val.graph, graph_val.branch, graph_val.rev, graph_val.\"key\"",
    "graph_val_get": "SELECT graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev",
    "graph_val_ins": "INSERT OR REPLACE INTO graph_val (graph, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?)",
    "graph_val_items": "SELECT graph_val.\"key\", graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev",
    "graph_val_upd": "UPDATE graph_val SET value=? WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev = ?",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "handled_avatar_rule": "INSERT INTO avatar_rules_handled (character, rulebook, rule, graph, avatar, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "handled_character_place_rule": "INSERT INTO character_place_rules_handled (character, rulebook, place, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "handled_character_portal_rule": "INSERT INTO character_portal_rules_handled (character, rulebook, \"nodeA\", \"nodeB\", idx, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "handled_character_rule": "INSERT INTO character_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)",
    "handled_character_thing_rule": "INSERT INTO character_thing_rules_handled (character, rulebook, thing, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "handled_place_rule": "INSERT INTO place_rules_handled (character, rulebook, place, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "handled_portal_rule": "INSERT INTO portal_rules_handled (character, rulebook, \"nodeA\", \"nodeB\", idx, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "handled_thing_rule": "INSERT INTO thing_rules_handled (character, rulebook, thing, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "haverule": "SELECT rules.rule \nFROM rules \nWHERE rules.rule = ?",
    "index_active_rules": "CREATE INDEX active_rules_idx ON active_rules (rulebook, rule)",
    "index_avatar_rules_handled": "CREATE INDEX avatar_rules_handled_idx ON avatar_rules_handled (character, rulebook, rule, avatar)",
    "index_avatars": "CREATE INDEX avatars_idx ON avatars (character_graph, avatar_graph, avatar_node)",
    "index_character_place_rules_handled": "CREATE INDEX character_place_rules_handled_idx ON character_place_rules_handled (character, rulebook, rule, place)",
    "index_character_portal_rules_handled": "CREATE INDEX character_portal_rules_handled_idx ON character_portal_rules_handled (character, rulebook, rule, \"nodeA\", \"nodeB\")",
    "index_character_rules_handled": "CREATE INDEX character_rules_handled_idx ON character_rules_handled (character, rulebook, rule)",
    "index_character_thing_rules_handled": "CREATE INDEX character_thing_rules_handled_idx ON character_thing_rules_handled (character, rulebook, rule, thing)",
    "index_edge_val_time": "CREATE INDEX edge_val_time_idx ON edge_val (graph, \"nodeA\", \"nodeB\", idx, branch, rev)",
    "index_edges_time": "CREATE INDEX edges_time_idx ON edges (graph, branch, rev)",
    "index_graph_val_time": "CREATE INDEX graph_val_time_idx ON graph_val (graph, branch, rev)",
    "index_node_val_time": "CREATE INDEX node_val_time_idx ON node_val (graph, node, branch, rev)",
    "index_nodes_time": "CREATE INDEX nodes_time_idx ON nodes (graph, branch, rev)",
    "index_place_rules_handled": "CREATE INDEX place_rules_handled_idx ON place_rules_handled (character, place, rulebook, rule)",
    "index_portal_rules_handled": "CREATE INDEX portal_rules_handled_idx ON portal_rules_handled (character, \"nodeA\", \"nodeB\", idx, rulebook, rule)",
    "index_senses": "CREATE INDEX senses_idx ON senses (character, sense)",
    "index_thing_rules_handled": "CREATE INDEX thing_rules_handled_idx ON thing_rules_handled (character, thing, rulebook, rule)",
    "index_things": "CREATE INDEX things_idx ON things (character, thing)",
    "ins_node_rulebook": "INSERT INTO node_rulebook (character, node, rulebook) VALUES (?, ?, ?)",
    "ins_portal_rulebook": "INSERT INTO portal_rulebook (character, \"nodeA\", \"nodeB\", idx, rulebook) VALUES (?, ?, ?, ?, ?)",
    "ins_rule": "INSERT INTO rules (rule, date, creator, description) VALUES (?, ?, ?, ?)",
    "multi_edges": "SELECT edges.idx, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "new_branch": "INSERT INTO branches (branch, parent, parent_rev) VALUES (?, ?, ?)",
    "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "nodeAs": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "nodeBs": "SELECT edges.\"nodeB\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "node_exists": "SELECT nodes.extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev",
    "node_rulebook": "SELECT node_rulebook.rulebook \nFROM node_rulebook \nWHERE node_rulebook.character = ? AND node_rulebook.node = ?",
    "node_stat_branch_data": "SELECT node_val.\"key\", node_val.rev, node_val.value \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ?",
    "node_val_data_branch": "SELECT node_val.\"key\", node_val.rev, node_val.value \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ?",
    "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.rev, node_val.value \nFROM node_val ORDER BY node_val.graph, node_val.node, node_val.branch, node_val.rev, node_val.\"key\"",
    "node_val_get": "SELECT node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev \nWHERE node_val.value IS NOT NULL",
    "node_val_ins": "INSERT OR REPLACE INTO node_val (graph, node, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?)",
    "node_val_items": "SELECT node_val.\"key\", node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev",
    "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.rev, nodes.extant \nFROM nodes ORDER BY nodes.graph, nodes.branch, nodes.rev, nodes.node",
    "nodes_extant": "SELECT nodes.node \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev \nWHERE nodes.extant = 1",
    "nodes_rulebooks": "SELECT node_rulebook.character, node_rulebook.node, node_rulebook.rulebook \nFROM node_rulebook",
    "parparrev": "SELECT branches.parent, branches.parent_rev \nFROM branches \nWHERE branches.branch = ?",
    "parrev": "SELECT branches.parent_rev \nFROM branches \nWHERE branches.branch = ?",
    "portal_rulebook": "SELECT portal_rulebook.rulebook \nFROM portal_rulebook \nWHERE portal_rulebook.character = ? AND portal_rulebook.\"nodeA\" = ? AND portal_rulebook.\"nodeB\" = ? AND portal_rulebook.idx = ?",
    "portals_rulebooks": "SELECT portal_rulebook.character, portal_rulebook.\"nodeA\", portal_rulebook.\"nodeB\", portal_rulebook.rulebook \nFROM portal_rulebook",
    "rule_actions": "SELECT rule_actions.action \nFROM rule_actions \nWHERE rule_actions.rule = ?",
    "rule_actions_count": "SELECT count(rule_actions.idx) AS count_1 \nFROM rule_actions \nWHERE rule_actions.rule = ?",
    "rule_actions_dec": "UPDATE rule_actions SET idx=(rule_actions.idx + 1) WHERE rule_actions.rule = ? AND rule_actions.idx > ?",
    "rule_actions_del": "DELETE FROM rule_actions WHERE rule_actions.rule = ? AND rule_actions.idx = ?",
    "rule_actions_del_all": "DELETE FROM rule_actions WHERE rule_actions.rule = ?",
    "rule_actions_inc": "UPDATE rule_actions SET idx=(rule_actions.idx + 1) WHERE rule_actions.rule = ? AND rule_actions.idx >= ?",
    "rule_actions_ins": "INSERT INTO rule_actions (rule, idx, action) VALUES (?, ?, ?)",
    "rule_prereqs": "SELECT rule_prereqs.prereq \nFROM rule_prereqs \nWHERE rule_prereqs.rule = ?",
    "rule_prereqs_count": "SELECT count(rule_prereqs.idx) AS count_1 \nFROM rule_prereqs \nWHERE rule_prereqs.rule = ?",
    "rule_prereqs_dec": "UPDATE rule_prereqs SET idx=(rule_prereqs.idx + 1) WHERE rule_prereqs.rule = ? AND rule_prereqs.idx > ?",
    "rule_prereqs_del": "DELETE FROM rule_prereqs WHERE rule_prereqs.rule = ? AND rule_prereqs.idx = ?",
    "rule_prereqs_del_all": "DELETE FROM rule_prereqs WHERE rule_prereqs.rule = ?",
    "rule_prereqs_inc": "UPDATE rule_prereqs SET idx=(rule_prereqs.idx + 1) WHERE rule_prereqs.rule = ? AND rule_prereqs.idx >= ?",
    "rule_prereqs_ins": "INSERT INTO rule_prereqs (rule, idx, prereq) VALUES (?, ?, ?)",
    "rule_triggers": "SELECT rule_triggers.\"trigger\" \nFROM rule_triggers \nWHERE rule_triggers.rule = ?",
    "rule_triggers_count": "SELECT count(rule_triggers.idx) AS count_1 \nFROM rule_triggers \nWHERE rule_triggers.rule = ?",
    "rule_triggers_dec": "UPDATE rule_triggers SET idx=(rule_triggers.idx + 1) WHERE rule_triggers.rule = ? AND rule_triggers.idx > ?",
    "rule_triggers_del": "DELETE FROM rule_triggers WHERE rule_triggers.rule = ? AND rule_triggers.idx = ?",
    "rule_triggers_del_all": "DELETE FROM rule_triggers WHERE rule_triggers.rule = ?",
    "rule_triggers_inc": "UPDATE rule_triggers SET idx=(rule_triggers.idx + 1) WHERE rule_triggers.rule = ? AND rule_triggers.idx >= ?",
    "rule_triggers_ins": "INSERT INTO rule_triggers (rule, idx, \"trigger\") VALUES (?, ?, ?)",
    "rulebook_dec": "UPDATE rulebooks SET idx=(rulebooks.idx - 1) WHERE rulebooks.rulebook = ? AND rulebooks.idx > ?",
    "rulebook_del": "DELETE FROM rulebooks WHERE rulebooks.rulebook = ? AND rulebooks.idx = ?",
    "rulebook_del_all": "DELETE FROM rulebooks WHERE rulebooks.rulebook = ?",
    "rulebook_get": "SELECT rulebooks.rule \nFROM rulebooks \nWHERE rulebooks.rulebook = ? AND rulebooks.idx = ?",
    "rulebook_get_avatar": "SELECT characters.avatar_rulebook \nFROM characters \nWHERE characters.character = ?",
    "rulebook_get_character": "SELECT characters.character_rulebook \nFROM characters \nWHERE characters.character = ?",
    "rulebook_get_character_place": "SELECT characters.character_place_rulebook \nFROM characters \nWHERE characters.character = ?",
    "rulebook_get_character_portal": "SELECT characters.character_portal_rulebook \nFROM characters \nWHERE characters.character = ?",
    "rulebook_get_character_thing": "SELECT characters.character_thing_rulebook \nFROM characters \nWHERE characters.character = ?",
    "rulebook_inc": "UPDATE rulebooks SET idx=(rulebooks.idx + 1) WHERE rulebooks.rulebook = ? AND rulebooks.idx >= ?",
    "rulebook_ins": "INSERT INTO rulebooks (rulebook, idx, rule) VALUES (?, ?, ?)",
    "rulebook_rules": "SELECT rulebooks.rule \nFROM rulebooks \nWHERE rulebooks.rulebook = ? ORDER BY rulebooks.idx",
    "rulebook_upd": "UPDATE rulebooks SET rule=? WHERE rulebooks.rulebook = ? AND rulebooks.idx = ?",
    "rulebooks": "SELECT rulebooks.rulebook \nFROM rulebooks",
    "rulebooks_rules": "SELECT rulebooks.rulebook, rulebooks.rule \nFROM rulebooks ORDER BY rulebooks.idx",
    "ruledel": "DELETE FROM rules WHERE rules.rule = ?",
    "ruleins": "INSERT INTO rules (rule) VALUES (?)",
    "sense_fun_ins": "INSERT INTO senses (character, sense, branch, tick, function, active) VALUES (?, ?, ?, ?, ?, ?)",
    "sense_fun_upd": "UPDATE senses SET function=?, active=? WHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick = ?",
    "sense_ins": "INSERT INTO senses (character, sense, branch, tick, active) VALUES (?, ?, ?, ?, ?)",
    "sense_upd": "UPDATE senses SET active=? WHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick = ?",
    "thing_loc_and_next_ins": "INSERT INTO things (character, thing, branch, tick, location, next_location) VALUES (?, ?, ?, ?, ?, ?)",
    "thing_loc_and_next_upd": "UPDATE things SET location=?, next_location=? WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick = ?",
    "thing_locs_branch_data": "SELECT things.tick, things.location, things.next_location \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.branch = ?",
    "universal_dump": "SELECT universal.\"key\", universal.branch, universal.tick, universal.value \nFROM universal ORDER BY universal.branch, universal.tick, universal.\"key\"",
    "universal_ins": "INSERT INTO universal (\"key\", branch, tick, value) VALUES (?, ?, ?, ?)",
    "universal_upd": "UPDATE universal SET value=? WHERE universal.\"key\" = ? AND universal.branch = ? AND universal.tick = ?",
    "upd_node_rulebook": "UPDATE node_rulebook SET rulebook=? WHERE node_rulebook.character = ? AND node_rulebook.node = ?",
    "upd_portal_rulebook": "UPDATE portal_rulebook SET rulebook=? WHERE portal_rulebook.character = ? AND portal_rulebook.\"nodeA\" = ? AND portal_rulebook.\"nodeB\" = ? AND portal_rulebook.idx = ?",
    "upd_rule": "UPDATE rules SET date=?, creator=?, description=? WHERE rules.rule = ?",
    "upd_rulebook_avatar": "UPDATE characters SET avatar_rulebook=? WHERE characters.character = ?",
    "upd_rulebook_character": "UPDATE characters SET character_rulebook=? WHERE characters.character = ?",
    "upd_rulebook_character_place": "UPDATE characters SET character_place_rulebook=? WHERE characters.character = ?",
    "upd_rulebook_character_portal": "UPDATE characters SET character_portal_rulebook=? WHERE characters.character = ?",
    "upd_rulebook_character_thing": "UPDATE characters SET character_thing_rulebook=? WHERE characters.character = ?",
    "view_character_node_rules_handled": "CREATE VIEW character_node_rules_handled AS SELECT character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.place AS node, character_place_rules_handled.branch, character_place_rules_handled.tick \nFROM character_place_rules_handled UNION SELECT character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.thing AS node, character_thing_rules_handled.branch, character_thing_rules_handled.tick \nFROM character_thing_rules_handled",
    "view_node_rules_handled": "CREATE VIEW node_rules_handled AS SELECT place_rules_handled.character, place_rules_handled.place AS node, place_rules_handled.rulebook, place_rules_handled.rule, place_rules_handled.branch, place_rules_handled.tick \nFROM place_rules_handled UNION SELECT thing_rules_handled.character, thing_rules_handled.thing AS node, thing_rules_handled.rulebook, thing_rules_handled.rule, thing_rules_handled.branch, thing_rules_handled.tick \nFROM thing_rules_handled"
}
