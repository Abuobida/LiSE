{
    "allbranch": "SELECT branches.branch, branches.parent, branches.parent_rev \nFROM branches ORDER BY branches.branch",
    "avatar_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatar_rulebook",
    "avatar_rulebook_dump": "SELECT * \nFROM avatar_rulebook",
    "avatar_rulebook_insert": "INSERT INTO avatar_rulebook (character, branch, tick, rulebook) VALUES (?, ?, ?, ?)",
    "avatar_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatar_rules_handled",
    "avatar_rules_handled_dump": "SELECT * \nFROM avatar_rules_handled",
    "avatar_rules_handled_insert": "INSERT INTO avatar_rules_handled (character, rulebook, rule, graph, avatar, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "avatar_upd": "UPDATE avatars SET is_avatar=? WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.tick = ?",
    "avatars_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatars",
    "avatars_dump": "SELECT * \nFROM avatars",
    "avatars_insert": "INSERT INTO avatars (character_graph, avatar_graph, avatar_node, branch, tick, is_avatar) VALUES (?, ?, ?, ?, ?, ?)",
    "branch_children": "SELECT branches.branch \nFROM branches \nWHERE branches.parent = ?",
    "branches_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM branches",
    "branches_dump": "SELECT * \nFROM branches",
    "branches_insert": "INSERT INTO branches (branch, date, creator, description, parent, parent_rev) VALUES (?, ?, ?, ?, ?, ?)",
    "character_place_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_place_rulebook",
    "character_place_rulebook_dump": "SELECT * \nFROM character_place_rulebook",
    "character_place_rulebook_insert": "INSERT INTO character_place_rulebook (character, branch, tick, rulebook) VALUES (?, ?, ?, ?)",
    "character_place_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_place_rules_handled",
    "character_place_rules_handled_dump": "SELECT * \nFROM character_place_rules_handled",
    "character_place_rules_handled_insert": "INSERT INTO character_place_rules_handled (character, rulebook, rule, place, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "character_portal_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_portal_rulebook",
    "character_portal_rulebook_dump": "SELECT * \nFROM character_portal_rulebook",
    "character_portal_rulebook_insert": "INSERT INTO character_portal_rulebook (character, branch, tick, rulebook) VALUES (?, ?, ?, ?)",
    "character_portal_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_portal_rules_handled",
    "character_portal_rules_handled_dump": "SELECT * \nFROM character_portal_rules_handled",
    "character_portal_rules_handled_insert": "INSERT INTO character_portal_rules_handled (character, rulebook, rule, orig, dest, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "character_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_rulebook",
    "character_rulebook_dump": "SELECT * \nFROM character_rulebook",
    "character_rulebook_insert": "INSERT INTO character_rulebook (character, branch, tick, rulebook) VALUES (?, ?, ?, ?)",
    "character_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_rules_handled",
    "character_rules_handled_dump": "SELECT * \nFROM character_rules_handled",
    "character_rules_handled_insert": "INSERT INTO character_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)",
    "character_thing_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_thing_rulebook",
    "character_thing_rulebook_dump": "SELECT * \nFROM character_thing_rulebook",
    "character_thing_rulebook_insert": "INSERT INTO character_thing_rulebook (character, branch, tick, rulebook) VALUES (?, ?, ?, ?)",
    "character_thing_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_thing_rules_handled",
    "character_thing_rules_handled_dump": "SELECT * \nFROM character_thing_rules_handled",
    "character_thing_rules_handled_insert": "INSERT INTO character_thing_rules_handled (character, rulebook, rule, thing, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "create_avatar_rulebook": "\nCREATE TABLE avatar_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_avatar_rules_handled": "\nCREATE TABLE avatar_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tgraph VARCHAR(50) NOT NULL, \n\tavatar VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, graph, avatar, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES avatar_rulebook (character, rulebook)\n)\n\n",
    "create_avatars": "\nCREATE TABLE avatars (\n\tcharacter_graph VARCHAR(50) NOT NULL, \n\tavatar_graph VARCHAR(50) NOT NULL, \n\tavatar_node VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tis_avatar BOOLEAN NOT NULL, \n\tPRIMARY KEY (character_graph, avatar_graph, avatar_node, branch, tick), \n\tFOREIGN KEY(character_graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(avatar_graph, avatar_node) REFERENCES nodes (graph, node), \n\tCHECK (is_avatar IN (0, 1))\n)\n\n",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tparent VARCHAR(50) NOT NULL, \n\tparent_rev INTEGER NOT NULL, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n",
    "create_character_place_rulebook": "\nCREATE TABLE character_place_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_place_rules_handled": "\nCREATE TABLE character_place_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tplace VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, place, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_place_rulebook (character, rulebook), \n\tFOREIGN KEY(character, place) REFERENCES nodes (graph, node)\n)\n\n",
    "create_character_portal_rulebook": "\nCREATE TABLE character_portal_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_portal_rules_handled": "\nCREATE TABLE character_portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, orig, dest, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_portal_rulebook (character, rulebook), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_character_rulebook": "\nCREATE TABLE character_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_rules_handled": "\nCREATE TABLE character_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_rulebook (character, rulebook)\n)\n\n",
    "create_character_thing_rulebook": "\nCREATE TABLE character_thing_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_thing_rules_handled": "\nCREATE TABLE character_thing_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, thing, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_thing_rulebook (character, rulebook), \n\tFOREIGN KEY(character, thing) REFERENCES things (character, thing)\n)\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, orig, dest, idx, \"key\", branch, rev), \n\tFOREIGN KEY(graph, orig, dest, idx) REFERENCES edges (graph, orig, dest, idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, orig, dest, idx, branch, rev), \n\tFOREIGN KEY(graph, orig) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, dest) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\")\n)\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"key\", branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph VARCHAR(50) NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\ttype VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n",
    "create_node_rulebook": "\nCREATE TABLE node_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, node, branch, tick), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n",
    "create_node_rules_handled": "\nCREATE TABLE node_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, node, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcontributor VARCHAR(50), \n\tdescription VARCHAR(50), \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, node, \"key\", branch, rev), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tdate DATETIME, \n\tcreator VARCHAR(50), \n\tdescription VARCHAR(50), \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, node, branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_portal_rulebook": "\nCREATE TABLE portal_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (character, orig, dest, branch, tick), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_portal_rules_handled": "\nCREATE TABLE portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\torig VARCHAR(50) NOT NULL, \n\tdest VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, orig, dest, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_rule_actions": "\nCREATE TABLE rule_actions (\n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tactions VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, branch, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_prereqs": "\nCREATE TABLE rule_prereqs (\n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tprereqs VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, branch, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_triggers": "\nCREATE TABLE rule_triggers (\n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\ttriggers VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule, branch, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rulebooks": "\nCREATE TABLE rulebooks (\n\trulebook VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\trules VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rulebook, branch, tick)\n)\n\n",
    "create_rules": "\nCREATE TABLE rules (\n\trule VARCHAR(50) NOT NULL, \n\ttype VARCHAR(50) NOT NULL, \n\tPRIMARY KEY (rule), \n\tCHECK (type IN ('character', 'node', 'portal'))\n)\n\n",
    "create_senses": "\nCREATE TABLE senses (\n\tcharacter VARCHAR(50), \n\tsense VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tfunction VARCHAR(50), \n\tPRIMARY KEY (character, sense, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph)\n)\n\n",
    "create_things": "\nCREATE TABLE things (\n\tcharacter VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tlocation VARCHAR(50), \n\tnext_location VARCHAR(50), \n\tPRIMARY KEY (character, thing, branch, tick), \n\tFOREIGN KEY(character, thing) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, location) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, next_location) REFERENCES nodes (graph, node)\n)\n\n",
    "create_universals": "\nCREATE TABLE universals (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\", branch, tick)\n)\n\n",
    "ctbranch": "SELECT COUNT(branches.branch) AS \"COUNT_1\" \nFROM branches \nWHERE branches.branch = ?",
    "ctglobal": "SELECT COUNT(global.\"key\") AS \"COUNT_1\" \nFROM global",
    "ctgraph": "SELECT COUNT(graphs.graph) AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?",
    "del_char_avatars": "DELETE FROM avatars WHERE avatars.character_graph = ?",
    "del_char_things": "DELETE FROM things WHERE things.character = ?",
    "del_edge_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_node_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "dests": "SELECT edges.dest, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.orig AS orig, edges.dest AS dest, edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.orig = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.orig = hirev.orig AND edges.dest = hirev.dest AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "edge_exist_ins": "INSERT OR REPLACE INTO edges (graph, orig, dest, idx, branch, rev, extant) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "edge_exist_upd": "UPDATE edges SET extant=? WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev = ?",
    "edge_exists": "SELECT edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.orig AS orig, edges.dest AS dest, edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.orig = hirev.orig AND edges.dest = hirev.dest AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "edge_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM edge_val",
    "edge_val_dump": "SELECT * \nFROM edge_val",
    "edge_val_get": "SELECT edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.orig AS orig, edge_val.dest AS dest, edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.orig = hirev.orig AND edge_val.dest = hirev.dest AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev",
    "edge_val_ins": "INSERT OR REPLACE INTO edge_val (graph, orig, dest, idx, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "edge_val_insert": "INSERT INTO edge_val (graph, orig, dest, idx, \"key\", branch, rev, date, contributor, description, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "edge_val_items": "SELECT edge_val.\"key\", edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.orig AS orig, edge_val.dest AS dest, edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.orig = hirev.orig AND edge_val.dest = hirev.dest AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev",
    "edge_val_upd": "UPDATE edge_val SET value=? WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev = ?",
    "edges_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM edges",
    "edges_dump": "SELECT * \nFROM edges",
    "edges_extant": "SELECT edges.orig, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.orig AS orig, edges.dest AS dest, edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.orig = hirev.orig AND edges.dest = hirev.dest AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "edges_insert": "INSERT INTO edges (graph, orig, dest, idx, branch, rev, date, creator, description, extant) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "exist_node_ins": "INSERT OR REPLACE INTO nodes (graph, node, branch, rev, extant) VALUES (?, ?, ?, ?, ?)",
    "exist_node_upd": "UPDATE nodes SET extant=? WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev = ?",
    "global_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM global",
    "global_del": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_dump": "SELECT * \nFROM global",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_ins": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_insert": "INSERT INTO global (\"key\", date, creator, description, value) VALUES (?, ?, ?, ?, ?)",
    "global_items": "SELECT global.\"key\", global.value \nFROM global",
    "global_upd": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM graph_val",
    "graph_val_dump": "SELECT * \nFROM graph_val",
    "graph_val_get": "SELECT graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev",
    "graph_val_ins": "INSERT OR REPLACE INTO graph_val (graph, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?)",
    "graph_val_insert": "INSERT INTO graph_val (graph, \"key\", branch, rev, date, contributor, description, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "graph_val_items": "SELECT graph_val.\"key\", graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev",
    "graph_val_upd": "UPDATE graph_val SET value=? WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev = ?",
    "graphs_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM graphs",
    "graphs_dump": "SELECT * \nFROM graphs",
    "graphs_insert": "INSERT INTO graphs (graph, date, creator, description, type) VALUES (?, ?, ?, ?, ?)",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "index_avatar_rules_handled": "CREATE INDEX avatar_rules_handled_idx ON avatar_rules_handled (character, rulebook, rule)",
    "index_avatars": "CREATE INDEX avatars_idx ON avatars (character_graph, avatar_graph, avatar_node)",
    "index_character_place_rules_handled": "CREATE INDEX character_place_rules_handled_idx ON character_place_rules_handled (character, rulebook, rule)",
    "index_character_portal_rules_handled": "CREATE INDEX character_portal_rules_handled_idx ON character_portal_rules_handled (character, rulebook, rule)",
    "index_character_rules_handled": "CREATE INDEX character_rules_handled_idx ON character_rules_handled (character, rulebook, rule)",
    "index_character_thing_rules_handled": "CREATE INDEX character_thing_rules_handled_idx ON character_thing_rules_handled (character, rulebook, rule)",
    "index_edge_val_time": "CREATE INDEX edge_val_time_idx ON edge_val (graph, orig, dest, idx, branch, rev)",
    "index_edges_time": "CREATE INDEX edges_time_idx ON edges (graph, branch, rev)",
    "index_graph_val_time": "CREATE INDEX graph_val_time_idx ON graph_val (graph, branch, rev)",
    "index_node_rules_handled": "CREATE INDEX node_rules_handled_idx ON node_rules_handled (character, node, rulebook, rule)",
    "index_node_val_time": "CREATE INDEX node_val_time_idx ON node_val (graph, node, branch, rev)",
    "index_nodes_time": "CREATE INDEX nodes_time_idx ON nodes (graph, branch, rev)",
    "index_portal_rules_handled": "CREATE INDEX portal_rules_handled_idx ON portal_rules_handled (character, orig, dest, rulebook, rule)",
    "index_senses": "CREATE INDEX senses_idx ON senses (character, sense)",
    "index_things": "CREATE INDEX things_idx ON things (character, thing)",
    "multi_edges": "SELECT edges.idx, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.orig AS orig, edges.dest AS dest, edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.orig = hirev.orig AND edges.dest = hirev.dest AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "new_branch": "INSERT INTO branches (branch, parent, parent_rev) VALUES (?, ?, ?)",
    "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "node_exists": "SELECT nodes.extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev",
    "node_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_rulebook",
    "node_rulebook_dump": "SELECT * \nFROM node_rulebook",
    "node_rulebook_insert": "INSERT INTO node_rulebook (character, node, branch, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "node_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_rules_handled",
    "node_rules_handled_dump": "SELECT * \nFROM node_rules_handled",
    "node_rules_handled_insert": "INSERT INTO node_rules_handled (character, node, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "node_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_val",
    "node_val_dump": "SELECT * \nFROM node_val",
    "node_val_get": "SELECT node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev \nWHERE node_val.value IS NOT NULL",
    "node_val_ins": "INSERT OR REPLACE INTO node_val (graph, node, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?)",
    "node_val_insert": "INSERT INTO node_val (graph, node, \"key\", branch, rev, date, contributor, description, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "node_val_items": "SELECT node_val.\"key\", node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev",
    "nodes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM nodes",
    "nodes_dump": "SELECT * \nFROM nodes",
    "nodes_extant": "SELECT nodes.node \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev \nWHERE nodes.extant = 1",
    "nodes_insert": "INSERT INTO nodes (graph, node, branch, rev, date, creator, description, extant) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "origs": "SELECT edges.orig, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.orig AS orig, edges.dest AS dest, edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.dest = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.orig = hirev.orig AND edges.dest = hirev.dest AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev",
    "parparrev": "SELECT branches.parent, branches.parent_rev \nFROM branches \nWHERE branches.branch = ?",
    "parrev": "SELECT branches.parent_rev \nFROM branches \nWHERE branches.branch = ?",
    "portal_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM portal_rulebook",
    "portal_rulebook_dump": "SELECT * \nFROM portal_rulebook",
    "portal_rulebook_insert": "INSERT INTO portal_rulebook (character, orig, dest, branch, tick, rulebook) VALUES (?, ?, ?, ?, ?, ?)",
    "portal_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM portal_rules_handled",
    "portal_rules_handled_dump": "SELECT * \nFROM portal_rules_handled",
    "portal_rules_handled_insert": "INSERT INTO portal_rules_handled (character, orig, dest, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "rule_actions": "SELECT rule_actions.actions \nFROM rule_actions \nWHERE rule_actions.rule = ? AND rule_actions.branch = ? AND rule_actions.tick = ?",
    "rule_actions_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_actions",
    "rule_actions_dump": "SELECT * \nFROM rule_actions",
    "rule_actions_insert": "INSERT INTO rule_actions (rule, branch, tick, actions) VALUES (?, ?, ?, ?)",
    "rule_prereqs": "SELECT rule_prereqs.prereqs \nFROM rule_prereqs, rule_triggers \nWHERE rule_prereqs.rule = ? AND rule_prereqs.branch = ? AND rule_triggers.tick = ?",
    "rule_prereqs_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_prereqs",
    "rule_prereqs_dump": "SELECT * \nFROM rule_prereqs",
    "rule_prereqs_insert": "INSERT INTO rule_prereqs (rule, branch, tick, prereqs) VALUES (?, ?, ?, ?)",
    "rule_triggers": "SELECT rule_triggers.triggers \nFROM rule_triggers \nWHERE rule_triggers.rule = ? AND rule_triggers.branch = ? AND rule_triggers.tick = ?",
    "rule_triggers_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_triggers",
    "rule_triggers_dump": "SELECT * \nFROM rule_triggers",
    "rule_triggers_insert": "INSERT INTO rule_triggers (rule, branch, tick, triggers) VALUES (?, ?, ?, ?)",
    "rulebook_rules": "SELECT rulebooks.rules \nFROM rulebooks \nWHERE rulebooks.rulebook = ? AND rulebooks.branch = ? AND rulebooks.tick = ?",
    "rulebooks": "SELECT rulebooks.rulebook \nFROM rulebooks",
    "rulebooks_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rulebooks",
    "rulebooks_dump": "SELECT * \nFROM rulebooks",
    "rulebooks_insert": "INSERT INTO rulebooks (rulebook, branch, tick, rules) VALUES (?, ?, ?, ?)",
    "rules_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rules",
    "rules_dump": "SELECT * \nFROM rules",
    "rules_insert": "INSERT INTO rules (rule, type) VALUES (?, ?)",
    "sense_upd": "UPDATE senses SET function=? WHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick = ?",
    "senses_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM senses",
    "senses_dump": "SELECT * \nFROM senses",
    "senses_insert": "INSERT INTO senses (character, sense, branch, tick, function) VALUES (?, ?, ?, ?, ?)",
    "thing_loc_and_next_upd": "UPDATE things SET location=?, next_location=? WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick = ?",
    "things_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM things",
    "things_dump": "SELECT * \nFROM things",
    "things_insert": "INSERT INTO things (character, thing, branch, tick, location, next_location) VALUES (?, ?, ?, ?, ?, ?)",
    "universal_update": "UPDATE universals SET value=? WHERE universals.\"key\" = ? AND universals.branch = ? AND universals.tick = ?",
    "universals_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM universals",
    "universals_dump": "SELECT * \nFROM universals",
    "universals_insert": "INSERT INTO universals (\"key\", branch, tick, value) VALUES (?, ?, ?, ?)",
    "upd_portal_rulebook": "UPDATE portal_rulebook SET rulebook=? WHERE portal_rulebook.character = ? AND portal_rulebook.orig = ? AND portal_rulebook.dest = ?"
}
