{"poll_character_place_rules": "SELECT characters.character, characters.character_place_rulebook, curactrule.rule, curactrule.active, handle.handled \nFROM characters JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON characters.character_place_rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = characters.character_place_rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT character_place_rules_handled.character AS character, character_place_rules_handled.rulebook AS rulebook, character_place_rules_handled.rule AS rule, \"1\" AS handled \nFROM character_place_rules_handled \nWHERE character_place_rules_handled.branch = ? AND character_place_rules_handled.tick = ?) AS handle ON handle.character = characters.character AND handle.rulebook = characters.character_place_rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY characters.character, rulebooks.rulebook, rulebooks.idx", "func_action_get": "SELECT action.bytecode \nFROM action \nWHERE action.name = ?", "rulebook_get_character_place": "SELECT characters.character_place_rulebook \nFROM characters \nWHERE characters.character = ?", "count_all_edges": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, edges.rev AS rev, edges.extant AS extant \nFROM edges)", "count_all_portal_rulebook": "SELECT count(character) AS tbl_row_count \nFROM (SELECT portal_rulebook.character AS character, portal_rulebook.\"nodeA\" AS \"nodeA\", portal_rulebook.\"nodeB\" AS \"nodeB\", portal_rulebook.idx AS idx, portal_rulebook.rulebook AS rulebook \nFROM portal_rulebook)", "edge_exist_upd": "UPDATE edges SET extant=? WHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev = ?", "rulebook_rules": "SELECT rulebooks.rule \nFROM rulebooks \nWHERE rulebooks.rulebook = ? ORDER BY rulebooks.idx", "count_all_action": "SELECT count(name) AS tbl_row_count \nFROM (SELECT action.name AS name, action.bytecode AS bytecode, action.plaincode AS plaincode, action.version AS version, action.author AS author, action.remarks AS remarks \nFROM action)", "ins_node_rulebook": "INSERT INTO node_rulebook (character, node, rulebook) VALUES (?, ?, ?)", "index_travel_reqs": "CREATE INDEX travel_reqs_idx ON travel_reqs (character)", "portal_rulebook": "SELECT portal_rulebook.rulebook \nFROM portal_rulebook \nWHERE portal_rulebook.character = ? AND portal_rulebook.\"nodeA\" = ? AND portal_rulebook.\"nodeB\" = ? AND portal_rulebook.idx = ?", "ct_character": "SELECT COUNT(characters.character) AS \"COUNT_1\" \nFROM characters \nWHERE characters.character = ?", "func_sense_del": "DELETE FROM sense WHERE sense.name = ?", "edge_val_items": "SELECT edge_val.\"key\", edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev", "func_function_get": "SELECT function.bytecode \nFROM function \nWHERE function.name = ?", "node_exists": "SELECT nodes.extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev", "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?", "count_all_sense": "SELECT count(name) AS tbl_row_count \nFROM (SELECT sense.name AS name, sense.bytecode AS bytecode, sense.plaincode AS plaincode, sense.version AS version, sense.author AS author, sense.remarks AS remarks \nFROM sense)", "handled_place_rule": "INSERT INTO place_rules_handled (character, place, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)", "handled_character_thing_rule": "INSERT INTO character_thing_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)", "create_node_rulebook": "\nCREATE TABLE node_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50), \n\tPRIMARY KEY (character, node), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n", "count_all_nodes": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, nodes.rev AS rev, nodes.extant AS extant \nFROM nodes)", "node_val_data_branch": "SELECT node_val.\"key\", node_val.rev, node_val.value \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ?", "graph_val_upd": "UPDATE graph_val SET value=? WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev = ?", "thing_and_loc": "SELECT things.thing, things.location \nFROM things JOIN (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, MAX(things.tick) AS tick \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick <= ? GROUP BY things.character, things.thing, things.branch) AS hitick ON things.character = hitick.character AND things.thing = hitick.thing AND things.branch = hitick.branch AND things.tick = hitick.tick LEFT OUTER JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, nodes.rev AS rev, nodes.extant AS extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.rev <= ? AND nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS ext_hirev ON nodes.graph = ext_hirev.graph AND nodes.node = ext_hirev.node AND nodes.branch = ext_hirev.branch AND nodes.rev = ext_hirev.rev) AS existence ON things.character = existence.graph AND things.thing = existence.node \nWHERE existence.extant = 1", "index_character_rules_handled": "CREATE INDEX character_rules_handled_idx ON character_rules_handled (character, rulebook, rule)", "rulebook_get_character_thing": "SELECT characters.character_thing_rulebook \nFROM characters \nWHERE characters.character = ?", "sense_ins": "INSERT INTO senses (character, sense, branch, tick, active) VALUES (?, ?, ?, ?, ?)", "allbranch": "SELECT branches.branch, branches.parent, branches.parent_rev \nFROM branches", "is_avatar_of": "SELECT avatars.is_avatar \nFROM avatars JOIN (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, MAX(avatars.tick) AS tick \nFROM avatars \nWHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.tick <= ?) AS hitick ON avatars.character_graph = hitick.character_graph AND avatars.avatar_graph = hitick.avatar_graph AND avatars.avatar_node = hitick.avatar_node AND avatars.branch = hitick.branch AND avatars.tick = hitick.tick", "rulebook_get_avatar": "SELECT characters.avatar_rulebook \nFROM characters \nWHERE characters.character = ?", "create_character_rules_handled": "\nCREATE TABLE character_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES characters (character, character_rulebook)\n)\n\n", "nodeBs": "SELECT edges.\"nodeB\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "poll_portal_rules": "SELECT portal_rulebook.character, portal_rulebook.\"nodeA\", portal_rulebook.\"nodeB\", portal_rulebook.idx, curactrule.rule, curactrule.active, handle.handled \nFROM portal_rulebook JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON portal_rulebook.rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = portal_rulebook.rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT portal_rules_handled.character AS character, portal_rules_handled.\"nodeA\" AS \"nodeA\", portal_rules_handled.\"nodeB\" AS \"nodeB\", portal_rules_handled.idx AS idx, portal_rules_handled.rulebook AS rulebook, portal_rules_handled.rule AS rule, \"1\" AS handled \nFROM portal_rules_handled \nWHERE portal_rules_handled.branch = ? AND portal_rules_handled.tick = ?) AS handle ON handle.character = portal_rulebook.character AND handle.\"nodeA\" = portal_rulebook.\"nodeA\" AND handle.\"nodeB\" = portal_rulebook.\"nodeB\" AND handle.idx = portal_rulebook.idx AND handle.rulebook = portal_rulebook.rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY portal_rulebook.character, portal_rulebook.\"nodeA\", portal_rulebook.\"nodeB\", portal_rulebook.idx, rulebooks.rulebook, rulebooks.idx", "count_all_rulebooks": "SELECT count(rulebook) AS tbl_row_count \nFROM (SELECT rulebooks.rulebook AS rulebook, rulebooks.idx AS idx, rulebooks.rule AS rule \nFROM rulebooks)", "func_function_del": "DELETE FROM function WHERE function.name = ?", "create_character_thing_rules_handled": "\nCREATE TABLE character_thing_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES characters (character, character_thing_rulebook)\n)\n\n", "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?", "view_node_rules_handled": "CREATE VIEW node_rules_handled AS SELECT place_rules_handled.character, place_rules_handled.place AS node, place_rules_handled.rulebook, place_rules_handled.rule, place_rules_handled.branch, place_rules_handled.tick \nFROM place_rules_handled UNION SELECT thing_rules_handled.character, thing_rules_handled.thing AS node, thing_rules_handled.rulebook, thing_rules_handled.rule, thing_rules_handled.branch, thing_rules_handled.tick \nFROM thing_rules_handled", "index_avatars": "CREATE INDEX avatars_idx ON avatars (character_graph, avatar_graph, avatar_node)", "string_strings_del": "DELETE FROM strings WHERE strings.language = ? AND strings.id = ?", "count_all_character_place_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_place_rules_handled.character AS character, character_place_rules_handled.rulebook AS rulebook, character_place_rules_handled.rule AS rule, character_place_rules_handled.branch AS branch, character_place_rules_handled.tick AS tick \nFROM character_place_rules_handled)", "exist_node_ins": "INSERT INTO nodes (graph, node, branch, rev, extant) VALUES (?, ?, ?, ?, ?)", "create_lise_globals": "\nCREATE TABLE lise_globals (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\", branch, tick)\n)\n\n", "count_all_avatar_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT avatar_rules_handled.character AS character, avatar_rules_handled.rulebook AS rulebook, avatar_rules_handled.rule AS rule, avatar_rules_handled.branch AS branch, avatar_rules_handled.tick AS tick \nFROM avatar_rules_handled)", "create_edges": "\nCREATE TABLE edges (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, \"nodeB\") REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n", "index_active_rules": "CREATE INDEX active_rules_idx ON active_rules (rulebook, rule)", "create_things": "\nCREATE TABLE things (\n\tcharacter VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tlocation VARCHAR(50), \n\tnext_location VARCHAR(50), \n\tPRIMARY KEY (character, thing, branch, tick), \n\tFOREIGN KEY(character, thing) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, location) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, next_location) REFERENCES nodes (graph, node)\n)\n\n", "create_portal_rules_handled": "\nCREATE TABLE portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, \"nodeA\", \"nodeB\", idx, rulebook, rule, branch, tick)\n)\n\n", "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?", "global_items": "SELECT global.\"key\", global.value \nFROM global", "ctrules": "SELECT COUNT() AS \"COUNT_1\" \nFROM rules", "create_graphs": "\nCREATE TABLE graphs (\n\tgraph VARCHAR(50) NOT NULL, \n\ttype VARCHAR(50), \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n", "index_nodes": "CREATE INDEX nodes_idx ON nodes (graph, node)", "create_thing_rules_handled": "\nCREATE TABLE thing_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\tthing VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, thing, rulebook, rule, branch, tick)\n)\n\n", "count_all_portal_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT portal_rules_handled.character AS character, portal_rules_handled.\"nodeA\" AS \"nodeA\", portal_rules_handled.\"nodeB\" AS \"nodeB\", portal_rules_handled.idx AS idx, portal_rules_handled.rulebook AS rulebook, portal_rules_handled.rule AS rule, portal_rules_handled.branch AS branch, portal_rules_handled.tick AS tick \nFROM portal_rules_handled)", "create_portal_rulebook": "\nCREATE TABLE portal_rulebook (\n\tcharacter VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\trulebook VARCHAR(50), \n\tPRIMARY KEY (character, \"nodeA\", \"nodeB\", idx), \n\tFOREIGN KEY(character, \"nodeA\", \"nodeB\", idx) REFERENCES edges (graph, \"nodeA\", \"nodeB\", idx)\n)\n\n", "character_things_items": "SELECT things.thing, things.location \nFROM things JOIN (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, MAX(things.tick) AS tick \nFROM things \nWHERE things.character = ? AND things.branch = ? AND things.tick <= ? GROUP BY things.character, things.thing, things.branch) AS hitick ON things.character = hitick.character AND things.thing = hitick.thing AND things.branch = hitick.branch AND things.tick = hitick.tick", "next_arrival_time_get": "SELECT MIN(things.tick) AS \"MIN_1\" \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.location = ? AND things.branch = ? AND things.tick > ?", "global_upd": "UPDATE global SET value=? WHERE global.\"key\" = ?", "thing_loc_and_next_upd": "UPDATE things SET location=?, next_location=? WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick = ?", "create_character_place_rules_handled": "\nCREATE TABLE character_place_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES characters (character, character_place_rulebook)\n)\n\n", "edge_val_get": "SELECT edge_val.value \nFROM edge_val JOIN (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, MAX(edge_val.rev) AS rev \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.rev <= ? GROUP BY edge_val.graph, edge_val.\"nodeA\", edge_val.\"nodeB\", edge_val.idx, edge_val.\"key\", edge_val.branch) AS hirev ON edge_val.graph = hirev.graph AND edge_val.\"nodeA\" = hirev.\"nodeA\" AND edge_val.\"nodeB\" = hirev.\"nodeB\" AND edge_val.idx = hirev.idx AND edge_val.branch = hirev.branch AND edge_val.rev = hirev.rev", "count_all_graph_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, graph_val.rev AS rev, graph_val.value AS value \nFROM graph_val)", "global_del": "DELETE FROM global WHERE global.\"key\" = ?", "poll_node_rules": "SELECT node_rulebook.character, node_rulebook.node, node_rulebook.rulebook, curactrule.rule, curactrule.active \nFROM node_rulebook JOIN rulebooks ON rulebooks.rulebook = node_rulebook.rulebook JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON rulebooks.rulebook = curactrule.rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT character AS character, node AS node, rulebook AS rulebook, rule AS rule, \"1\" AS handled \nFROM (SELECT place_rules_handled.character AS character, place_rules_handled.place AS node, place_rules_handled.rulebook AS rulebook, place_rules_handled.rule AS rule, place_rules_handled.branch AS branch, place_rules_handled.tick AS tick \nFROM place_rules_handled UNION SELECT thing_rules_handled.character AS character, thing_rules_handled.thing AS node, thing_rules_handled.rulebook AS rulebook, thing_rules_handled.rule AS rule, thing_rules_handled.branch AS branch, thing_rules_handled.tick AS tick \nFROM thing_rules_handled) \nWHERE branch = ? AND tick = ?) AS nrhandle ON node_rulebook.character = nrhandle.character AND node_rulebook.node = nrhandle.node AND node_rulebook.rulebook = nrhandle.rulebook AND curactrule.rule = nrhandle.rule \nWHERE nrhandle.handled IS NULL ORDER BY node_rulebook.character, node_rulebook.node, rulebooks.rulebook, rulebooks.idx", "count_all_graphs": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT graphs.graph AS graph, graphs.type AS type \nFROM graphs)", "index_things": "CREATE INDEX things_idx ON things (character, thing)", "rulebook_del": "DELETE FROM rulebooks WHERE rulebooks.rulebook = ? AND rulebooks.idx = ?", "edge_val_ins": "INSERT INTO edge_val (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", "create_trigger": "\nCREATE TABLE \"trigger\" (\n\tname VARCHAR(50) NOT NULL, \n\tbytecode VARCHAR(50), \n\tplaincode VARCHAR(50), \n\tversion INTEGER, \n\tauthor VARCHAR(50), \n\tremarks VARCHAR(50), \n\tPRIMARY KEY (name)\n)\n\n", "handled_avatar_rule": "INSERT INTO avatar_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)", "node_val_get": "SELECT node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev \nWHERE node_val.value IS NOT NULL", "active_rule_character_portal": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.branch, MAX(character_portal_rules_handled.tick) AS tick \nFROM character_portal_rules_handled \nWHERE character_portal_rules_handled.character = ? AND character_portal_rules_handled.rulebook = ? AND character_portal_rules_handled.rule = ? AND character_portal_rules_handled.branch = ? AND character_portal_rules_handled.tick <= ? GROUP BY character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.branch) ON active_rules.rulebook = rulebook AND active_rules.rule = rule AND active_rules.branch = branch AND active_rules.tick = tick", "count_all_node_rulebook": "SELECT count(character) AS tbl_row_count \nFROM (SELECT node_rulebook.character AS character, node_rulebook.node AS node, node_rulebook.rulebook AS rulebook \nFROM node_rulebook)", "active_rule_rulebook": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.rulebook = ? AND active_rules.rule = ? AND active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick", "rulebook_get_character": "SELECT characters.character_rulebook \nFROM characters \nWHERE characters.character = ?", "count_all_prereq": "SELECT count(name) AS tbl_row_count \nFROM (SELECT prereq.name AS name, prereq.bytecode AS bytecode, prereq.plaincode AS plaincode, prereq.version AS version, prereq.author AS author, prereq.remarks AS remarks \nFROM prereq)", "exist_node_upd": "UPDATE nodes SET extant=? WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.rev = ?", "count_all_character_thing_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_thing_rules_handled.character AS character, character_thing_rules_handled.rulebook AS rulebook, character_thing_rules_handled.rule AS rule, character_thing_rules_handled.branch AS branch, character_thing_rules_handled.tick AS tick \nFROM character_thing_rules_handled)", "nodeAs": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "string_strings_get": "SELECT strings.string \nFROM strings \nWHERE strings.language = ? AND strings.id = ?", "count_all_thing_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT thing_rules_handled.character AS character, thing_rules_handled.thing AS thing, thing_rules_handled.rulebook AS rulebook, thing_rules_handled.rule AS rule, thing_rules_handled.branch AS branch, thing_rules_handled.tick AS tick \nFROM thing_rules_handled)", "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?", "upd_rulebook_character_place": "UPDATE characters SET character_place_rulebook=? WHERE characters.character = ?", "create_avatars": "\nCREATE TABLE avatars (\n\tcharacter_graph VARCHAR(50) NOT NULL, \n\tavatar_graph VARCHAR(50) NOT NULL, \n\tavatar_node VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tis_avatar BOOLEAN, \n\tPRIMARY KEY (character_graph, avatar_graph, avatar_node, branch, tick), \n\tFOREIGN KEY(character_graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(avatar_graph, avatar_node) REFERENCES nodes (graph, node), \n\tCHECK (is_avatar IN (0, 1))\n)\n\n", "edge_exist_ins": "INSERT INTO edges (graph, \"nodeA\", \"nodeB\", idx, branch, rev, extant) VALUES (?, ?, ?, ?, ?, ?, ?)", "func_trigger_get": "SELECT \"trigger\".bytecode \nFROM \"trigger\" \nWHERE \"trigger\".name = ?", "rulebook_upd": "UPDATE rulebooks SET rule=? WHERE rulebooks.rulebook = ? AND rulebooks.idx = ?", "count_all_avatars": "SELECT count(character_graph) AS tbl_row_count \nFROM (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, avatars.tick AS tick, avatars.is_avatar AS is_avatar \nFROM avatars)", "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)", "func_prereq_ins": "INSERT INTO prereq (name, bytecode) VALUES (?, ?)", "active_rule_character_place": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.branch, MAX(character_place_rules_handled.tick) AS tick \nFROM character_place_rules_handled \nWHERE character_place_rules_handled.character = ? AND character_place_rules_handled.rulebook = ? AND character_place_rules_handled.rule = ? AND character_place_rules_handled.branch = ? AND character_place_rules_handled.tick <= ? GROUP BY character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.branch) ON active_rules.rulebook = rulebook AND active_rules.rule = rule AND active_rules.branch = branch AND active_rules.tick = tick", "ct_characters": "SELECT COUNT(characters.character) AS \"COUNT_1\" \nFROM characters", "graph_val_ins": "INSERT INTO graph_val (graph, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?)", "handled_thing_rule": "INSERT INTO thing_rules_handled (character, thing, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?)", "sense_upd": "UPDATE senses SET active=? WHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick = ?", "rule_ins": "INSERT INTO active_rules (rulebook, rule, branch, tick, active) VALUES (?, ?, ?, ?, ?)", "rulebook_ins": "INSERT INTO rulebooks (rulebook, idx, rule) VALUES (?, ?, ?)", "count_all_trigger": "SELECT count(name) AS tbl_row_count \nFROM (SELECT \"trigger\".name AS name, \"trigger\".bytecode AS bytecode, \"trigger\".plaincode AS plaincode, \"trigger\".version AS version, \"trigger\".author AS author, \"trigger\".remarks AS remarks \nFROM \"trigger\")", "parrev": "SELECT branches.parent_rev \nFROM branches \nWHERE branches.branch = ?", "poll_character_rules": "SELECT characters.character, characters.character_rulebook, curactrule.rule, curactrule.active, handle.handled \nFROM characters JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON characters.character_rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = characters.character_rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT character_rules_handled.character AS character, character_rules_handled.rulebook AS rulebook, character_rules_handled.rule AS rule, \"1\" AS handled \nFROM character_rules_handled \nWHERE character_rules_handled.branch = ? AND character_rules_handled.tick = ?) AS handle ON handle.character = characters.character AND handle.rulebook = characters.character_rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY characters.character, rulebooks.rulebook, rulebooks.idx", "handled_character_portal_rule": "INSERT INTO character_portal_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)", "func_trigger_del": "DELETE FROM \"trigger\" WHERE \"trigger\".name = ?", "create_characters": "\nCREATE TABLE characters (\n\tcharacter VARCHAR(50) NOT NULL, \n\tcharacter_rulebook VARCHAR(50), \n\tavatar_rulebook VARCHAR(50), \n\tcharacter_thing_rulebook VARCHAR(50), \n\tcharacter_place_rulebook VARCHAR(50), \n\tcharacter_portal_rulebook VARCHAR(50), \n\tPRIMARY KEY (character), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(character_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(avatar_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_thing_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_place_rulebook) REFERENCES rulebooks (rulebook), \n\tFOREIGN KEY(character_portal_rulebook) REFERENCES rulebooks (rulebook)\n)\n\n", "avatar_branch_data": "SELECT avatars.avatar_node, avatars.is_avatar \nFROM avatars JOIN (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, MAX(avatars.tick) AS tick \nFROM avatars \nWHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.branch = ? AND avatars.tick <= ?) AS hitick ON avatars.character_graph = hitick.character_graph AND avatars.avatar_graph = hitick.avatar_graph AND avatars.avatar_node = hitick.avatar_node AND avatars.branch = hitick.branch AND avatars.tick = hitick.tick", "func_trigger_upd": "UPDATE \"trigger\" SET bytecode=? WHERE \"trigger\".name = ?", "index_graph_val": "CREATE INDEX graph_val_idx ON graph_val (graph, \"key\")", "string_strings_lang_items": "SELECT strings.id, strings.string \nFROM strings \nWHERE strings.language = ? ORDER BY strings.id", "node_val_items": "SELECT node_val.\"key\", node_val.value \nFROM node_val JOIN (SELECT node_val.graph AS graph, node_val.node AS node, node_val.branch AS branch, node_val.\"key\" AS \"key\", MAX(node_val.rev) AS rev \nFROM node_val \nWHERE node_val.graph = ? AND node_val.node = ? AND node_val.branch = ? AND node_val.rev <= ? GROUP BY node_val.graph, node_val.node, node_val.branch, node_val.\"key\") AS hirev ON node_val.graph = hirev.graph AND node_val.node = hirev.node AND node_val.\"key\" = hirev.\"key\" AND node_val.branch = hirev.branch AND node_val.rev = hirev.rev", "func_sense_get": "SELECT sense.bytecode \nFROM sense \nWHERE sense.name = ?", "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"key\", branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n", "func_sense_ins": "INSERT INTO sense (name, bytecode) VALUES (?, ?)", "index_node_val": "CREATE INDEX node_val_idx ON node_val (graph, node)", "del_node_graph": "DELETE FROM nodes WHERE nodes.graph = ?", "handled_portal_rule": "INSERT INTO portal_rules_handled (character, \"nodeA\", \"nodeB\", idx, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", "count_all_branches": "SELECT count(branch) AS tbl_row_count \nFROM (SELECT branches.branch AS branch, branches.parent AS parent, branches.parent_rev AS parent_rev \nFROM branches)", "universal_get": "SELECT lise_globals.value \nFROM lise_globals, (SELECT lise_globals.\"key\" AS \"key\", lise_globals.branch AS branch, MAX(lise_globals.tick) AS tick \nFROM lise_globals \nWHERE lise_globals.\"key\" = ? AND lise_globals.branch = ? AND lise_globals.tick <= ? GROUP BY lise_globals.\"key\", lise_globals.branch)", "index_avatar_rules_handled": "CREATE INDEX avatar_rules_handled_idx ON avatar_rules_handled (character, rulebook, rule)", "rulebook_dec": "UPDATE rulebooks SET idx=(rulebooks.idx - \"1\") WHERE rulebooks.rulebook = ? AND rulebooks.idx > ?", "count_all_place_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT place_rules_handled.character AS character, place_rules_handled.place AS place, place_rules_handled.rulebook AS rulebook, place_rules_handled.rule AS rule, place_rules_handled.branch AS branch, place_rules_handled.tick AS tick \nFROM place_rules_handled)", "func_action_upd": "UPDATE action SET bytecode=? WHERE action.name = ?", "ctgraph": "SELECT COUNT(graphs.graph) AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?", "create_prereq": "\nCREATE TABLE prereq (\n\tname VARCHAR(50) NOT NULL, \n\tbytecode VARCHAR(50), \n\tplaincode VARCHAR(50), \n\tversion INTEGER, \n\tauthor VARCHAR(50), \n\tremarks VARCHAR(50), \n\tPRIMARY KEY (name)\n)\n\n", "ruleins": "INSERT INTO rules (rule, actions, prereqs, triggers) VALUES (?, ?, ?, ?)", "upd_portal_rulebook": "UPDATE portal_rulebook SET rulebook=? WHERE portal_rulebook.character = ? AND portal_rulebook.\"nodeA\" = ? AND portal_rulebook.\"nodeB\" = ? AND portal_rulebook.idx = ?", "node_val_upd": "UPDATE node_val SET value=? WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.rev = ?", "index_edges": "CREATE INDEX edges_idx ON edges (graph, \"nodeA\", \"nodeB\", idx)", "edges_extant": "SELECT edges.\"nodeA\", edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "universal_items": "SELECT lise_globals.\"key\", lise_globals.value \nFROM lise_globals, (SELECT lise_globals.\"key\" AS \"key\", lise_globals.branch AS branch, MAX(lise_globals.tick) AS tick \nFROM lise_globals \nWHERE lise_globals.branch = ? AND lise_globals.tick <= ? GROUP BY lise_globals.\"key\", lise_globals.branch)", "upd_rulebook_character_thing": "UPDATE characters SET character_thing_rulebook=? WHERE characters.character = ?", "rulebook_inc": "UPDATE rulebooks SET idx=(rulebooks.idx + ?) WHERE rulebooks.rulebook = ? AND rulebooks.idx >= ?", "handled_character_place_rule": "INSERT INTO character_place_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)", "count_all_travel_reqs": "SELECT count(character) AS tbl_row_count \nFROM (SELECT travel_reqs.character AS character, travel_reqs.branch AS branch, travel_reqs.tick AS tick, travel_reqs.reqs AS reqs \nFROM travel_reqs)", "string_strings_ins": "INSERT INTO strings (id, language, string) VALUES (?, ?, ?)", "upd_rulebook_avatar": "UPDATE characters SET avatar_rulebook=? WHERE characters.character = ?", "edge_val_upd": "UPDATE edge_val SET value=? WHERE edge_val.graph = ? AND edge_val.\"nodeA\" = ? AND edge_val.\"nodeB\" = ? AND edge_val.idx = ? AND edge_val.branch = ? AND edge_val.rev = ?", "func_function_ins": "INSERT INTO function (name, bytecode) VALUES (?, ?)", "node_rulebook": "SELECT node_rulebook.rulebook \nFROM node_rulebook \nWHERE node_rulebook.character = ? AND node_rulebook.node = ?", "create_senses": "\nCREATE TABLE senses (\n\tcharacter VARCHAR(50), \n\tsense VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tfunction VARCHAR(50), \n\tactive BOOLEAN, \n\tPRIMARY KEY (character, sense, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tCHECK (active IN (0, 1))\n)\n\n", "sense_fun_ins": "INSERT INTO senses (character, sense, branch, tick, function, active) VALUES (?, ?, ?, ?, ?, ?)", "count_all_senses": "SELECT count(character) AS tbl_row_count \nFROM (SELECT senses.character AS character, senses.sense AS sense, senses.branch AS branch, senses.tick AS tick, senses.function AS function, senses.active AS active \nFROM senses)", "create_avatar_rules_handled": "\nCREATE TABLE avatar_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES characters (character, avatar_rulebook)\n)\n\n", "index_portal_rules_handled": "CREATE INDEX portal_rules_handled_idx ON portal_rules_handled (character, \"nodeA\", \"nodeB\", idx, rulebook, rule)", "del_char_things": "DELETE FROM things WHERE things.character = ?", "sense_func_get": "SELECT senses.function \nFROM senses JOIN (SELECT senses.character AS character, senses.sense AS sense, senses.branch AS branch, MAX(senses.tick) AS tick \nFROM senses \nWHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick <= ? GROUP BY senses.character, senses.sense, senses.branch) AS hitick ON senses.character = hitick.character AND senses.sense = hitick.sense AND senses.branch = hitick.branch AND senses.tick = hitick.tick", "thing_locs_data": "SELECT things.tick, things.location, things.next_location \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.branch = ?", "edge_exists": "SELECT edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.idx = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "create_global": "\nCREATE TABLE global (\n\t\"key\" VARCHAR(50) NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (\"key\")\n)\n\n", "active_rule_character_thing": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.branch, MAX(character_thing_rules_handled.tick) AS tick \nFROM character_thing_rules_handled \nWHERE character_thing_rules_handled.character = ? AND character_thing_rules_handled.rulebook = ? AND character_thing_rules_handled.rule = ? AND character_thing_rules_handled.branch = ? AND character_thing_rules_handled.tick <= ? GROUP BY character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.branch) ON active_rules.rulebook = rulebook AND active_rules.rule = rule AND active_rules.branch = branch AND active_rules.tick = tick", "index_thing_rules_handled": "CREATE INDEX thing_rules_handled_idx ON thing_rules_handled (character, thing, rulebook, rule)", "func_action_ins": "INSERT INTO action (name, bytecode) VALUES (?, ?)", "func_prereq_del": "DELETE FROM prereq WHERE prereq.name = ?", "upd_rulebook_character": "UPDATE characters SET character_rulebook=? WHERE characters.character = ?", "poll_character_thing_rules": "SELECT characters.character, characters.character_thing_rulebook, curactrule.rule, curactrule.active, handle.handled \nFROM characters JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON characters.character_thing_rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = characters.character_thing_rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT character_thing_rules_handled.character AS character, character_thing_rules_handled.rulebook AS rulebook, character_thing_rules_handled.rule AS rule, \"1\" AS handled \nFROM character_thing_rules_handled \nWHERE character_thing_rules_handled.branch = ? AND character_thing_rules_handled.tick = ?) AS handle ON handle.character = characters.character AND handle.rulebook = characters.character_thing_rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY characters.character, rulebooks.rulebook, rulebooks.idx", "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?", "node_val_ins": "INSERT INTO node_val (graph, node, \"key\", branch, rev, value) VALUES (?, ?, ?, ?, ?, ?)", "ins_portal_rulebook": "INSERT INTO portal_rulebook (character, \"nodeA\", \"nodeB\", idx, rulebook) VALUES (?, ?, ?, ?, ?)", "thing_loc_items": "SELECT things.thing, things.location \nFROM things JOIN (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, MAX(things.tick) AS tick \nFROM things \nWHERE things.character = ? AND things.branch = ? AND things.tick <= ? GROUP BY things.character, things.thing, things.branch) AS hitick ON things.character = hitick.character AND things.thing = hitick.thing AND things.branch = hitick.branch AND things.tick = hitick.tick LEFT OUTER JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, nodes.rev AS rev, nodes.extant AS extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.rev <= ? AND nodes.graph = ? AND nodes.branch = ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS ext_hirev ON nodes.graph = ext_hirev.graph AND nodes.node = ext_hirev.node AND nodes.branch = ext_hirev.branch AND nodes.rev = ext_hirev.rev) AS existence ON things.character = existence.graph AND things.thing = existence.node \nWHERE existence.extant = 1", "index_character_portal_rules_handled": "CREATE INDEX character_portal_rules_handled_idx ON character_portal_rules_handled (character, rulebook, rule)", "create_action": "\nCREATE TABLE action (\n\tname VARCHAR(50) NOT NULL, \n\tbytecode VARCHAR(50), \n\tplaincode VARCHAR(50), \n\tversion INTEGER, \n\tauthor VARCHAR(50), \n\tremarks VARCHAR(50), \n\tPRIMARY KEY (name)\n)\n\n", "parparrev": "SELECT branches.parent, branches.parent_rev \nFROM branches \nWHERE branches.branch = ?", "sense_fun_upd": "UPDATE senses SET function=?, active=? WHERE senses.character = ? AND senses.sense = ? AND senses.branch = ? AND senses.tick = ?", "func_prereq_get": "SELECT prereq.bytecode \nFROM prereq \nWHERE prereq.name = ?", "func_trigger_ins": "INSERT INTO \"trigger\" (name, bytecode) VALUES (?, ?)", "create_place_rules_handled": "\nCREATE TABLE place_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\tplace VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, place, rulebook, rule, branch, tick)\n)\n\n", "new_branch": "INSERT INTO branches (branch, parent, parent_rev) VALUES (?, ?, ?)", "create_rulebooks": "\nCREATE TABLE rulebooks (\n\trulebook VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\trule VARCHAR(50), \n\tPRIMARY KEY (rulebook, idx), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n", "index_senses": "CREATE INDEX senses_idx ON senses (character, sense)", "count_all_node_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT node_val.graph AS graph, node_val.node AS node, node_val.\"key\" AS \"key\", node_val.branch AS branch, node_val.rev AS rev, node_val.value AS value \nFROM node_val)", "haverule": "SELECT rules.rule \nFROM rules \nWHERE rules.rule = ?", "allrules": "SELECT rules.rule \nFROM rules", "create_rules": "\nCREATE TABLE rules (\n\trule VARCHAR(50) NOT NULL, \n\tactions VARCHAR(50), \n\tprereqs VARCHAR(50), \n\ttriggers VARCHAR(50), \n\tPRIMARY KEY (rule)\n)\n\n", "create_active_rules": "\nCREATE TABLE active_rules (\n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tactive BOOLEAN, \n\tPRIMARY KEY (rulebook, rule, branch, tick), \n\tFOREIGN KEY(rulebook, rule) REFERENCES rulebooks (rulebook, rule), \n\tCHECK (active IN (0, 1))\n)\n\n", "ct_rulebook_rules": "SELECT COUNT(rulebooks.rule) AS \"COUNT_1\" \nFROM rulebooks \nWHERE rulebooks.rulebook = ?", "rulebook_get": "SELECT rulebooks.rule \nFROM rulebooks \nWHERE rulebooks.rulebook = ? AND rulebooks.idx = ?", "rule_upd": "UPDATE active_rules SET active=? WHERE active_rules.rulebook = ? AND active_rules.rule = ? AND active_rules.branch = ? AND active_rules.tick = ?", "universal_ins": "INSERT INTO lise_globals (\"key\", branch, tick, value) VALUES (?, ?, ?, ?)", "sense_active_items": "SELECT senses.sense, senses.active \nFROM senses JOIN (SELECT senses.character AS character, senses.sense AS sense, senses.branch AS branch, MAX(senses.tick) AS tick \nFROM senses \nWHERE (senses.character IS NULL OR senses.character = ?) AND senses.tick <= ? AND senses.branch = ? GROUP BY senses.character, senses.sense, senses.branch) AS hitick ON senses.character = hitick.character AND senses.sense = hitick.sense AND senses.branch = hitick.branch AND senses.tick = hitick.tick", "character_ins": "INSERT INTO characters (character, character_rulebook, avatar_rulebook, character_thing_rulebook, character_place_rulebook, character_portal_rulebook) VALUES (?, ?, ?, ?, ?, ?)", "nodes_extant": "SELECT nodes.node \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND nodes.rev <= ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS hirev ON nodes.graph = hirev.graph AND nodes.node = hirev.node AND nodes.branch = hirev.branch AND nodes.rev = hirev.rev \nWHERE nodes.extant = 1", "avatars_now": "SELECT avatars.avatar_graph, avatars.avatar_node, avatars.is_avatar \nFROM avatars JOIN (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, MAX(avatars.tick) AS tick \nFROM avatars \nWHERE avatars.character_graph = ? AND avatars.branch = ? AND avatars.tick <= ?) AS hitick ON avatars.character_graph = hitick.character_graph AND avatars.avatar_graph = hitick.avatar_graph AND avatars.avatar_node = hitick.avatar_node AND avatars.branch = hitick.branch AND avatars.tick = hitick.tick LEFT OUTER JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, nodes.rev AS rev, nodes.extant AS extant \nFROM nodes JOIN (SELECT nodes.graph AS graph, nodes.node AS node, nodes.branch AS branch, MAX(nodes.rev) AS rev \nFROM nodes \nWHERE nodes.rev <= ? AND nodes.graph = ? AND nodes.branch = ? GROUP BY nodes.graph, nodes.node, nodes.branch) AS ext_hirev ON nodes.graph = ext_hirev.graph AND nodes.node = ext_hirev.node AND nodes.branch = ext_hirev.branch AND nodes.rev = ext_hirev.rev) AS existence ON avatars.avatar_graph = existence.graph AND avatars.avatar_node = existence.node \nWHERE existence.extant = 1", "create_function": "\nCREATE TABLE function (\n\tname VARCHAR(50) NOT NULL, \n\tbytecode VARCHAR(50), \n\tplaincode VARCHAR(50), \n\tversion INTEGER, \n\tauthor VARCHAR(50), \n\tremarks VARCHAR(50), \n\tPRIMARY KEY (name)\n)\n\n", "index_character_thing_rules_handled": "CREATE INDEX character_thing_rules_handled_idx ON character_thing_rules_handled (character, rulebook, rule)", "create_node_val": "\nCREATE TABLE node_val (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, node, \"key\", branch, rev), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n", "handled_character_rule": "INSERT INTO character_rules_handled (character, rulebook, rule, branch, tick) VALUES (?, ?, ?, ?, ?)", "count_all_active_rules": "SELECT count(rulebook) AS tbl_row_count \nFROM (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules)", "upd_node_rulebook": "UPDATE node_rulebook SET rulebook=? WHERE node_rulebook.character = ? AND node_rulebook.node = ?", "upd_rulebook_character_portal": "UPDATE characters SET character_portal_rulebook=? WHERE characters.character = ?", "count_all_lise_globals": "SELECT count(\"key\") AS tbl_row_count \nFROM (SELECT lise_globals.\"key\" AS \"key\", lise_globals.branch AS branch, lise_globals.tick AS tick, lise_globals.value AS value \nFROM lise_globals)", "create_nodes": "\nCREATE TABLE nodes (\n\tgraph VARCHAR(50) NOT NULL, \n\tnode VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\textant BOOLEAN, \n\tPRIMARY KEY (graph, node, branch, rev), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n", "avatarness": "SELECT avatars.avatar_graph, avatars.avatar_node, avatars.is_avatar \nFROM avatars JOIN (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, MAX(avatars.tick) AS tick \nFROM avatars \nWHERE avatars.character_graph = ? AND avatars.branch = ? AND avatars.tick <= ?) AS hitick ON avatars.character_graph = hitick.character_graph AND avatars.avatar_graph = hitick.avatar_graph AND avatars.avatar_node = hitick.avatar_node AND avatars.branch = hitick.branch AND avatars.tick = hitick.tick", "thing_loc_and_next_ins": "INSERT INTO things (character, thing, branch, tick, location, next_location) VALUES (?, ?, ?, ?, ?, ?)", "create_sense": "\nCREATE TABLE sense (\n\tname VARCHAR(50) NOT NULL, \n\tbytecode VARCHAR(50), \n\tplaincode VARCHAR(50), \n\tversion INTEGER, \n\tauthor VARCHAR(50), \n\tremarks VARCHAR(50), \n\tPRIMARY KEY (name)\n)\n\n", "graph_val_get": "SELECT graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev", "count_all_strings": "SELECT count(id) AS tbl_row_count \nFROM (SELECT strings.id AS id, strings.language AS language, strings.string AS string \nFROM strings)", "avatar_ins": "INSERT INTO avatars (character_graph, avatar_graph, avatar_node, branch, tick, is_avatar) VALUES (?, ?, ?, ?, ?, ?)", "count_all_things": "SELECT count(character) AS tbl_row_count \nFROM (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, things.tick AS tick, things.location AS location, things.next_location AS next_location \nFROM things)", "create_character_portal_rules_handled": "\nCREATE TABLE character_portal_rules_handled (\n\tcharacter VARCHAR(50) NOT NULL, \n\trulebook VARCHAR(50) NOT NULL, \n\trule VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, tick), \n\tFOREIGN KEY(character, rulebook) REFERENCES characters (character, character_portal_rulebook)\n)\n\n", "func_sense_upd": "UPDATE sense SET bytecode=? WHERE sense.name = ?", "create_strings": "\nCREATE TABLE strings (\n\tid VARCHAR(50) NOT NULL, \n\tlanguage VARCHAR(50) NOT NULL, \n\tstring VARCHAR(50), \n\tPRIMARY KEY (id, language)\n)\n\n", "count_all_function": "SELECT count(name) AS tbl_row_count \nFROM (SELECT function.name AS name, function.bytecode AS bytecode, function.plaincode AS plaincode, function.version AS version, function.author AS author, function.remarks AS remarks \nFROM function)", "avatar_users": "SELECT avatars.avatar_graph \nFROM avatars JOIN (SELECT avatars.character_graph AS character_graph, avatars.avatar_graph AS avatar_graph, avatars.avatar_node AS avatar_node, avatars.branch AS branch, MAX(avatars.tick) AS tick \nFROM avatars \nWHERE avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.tick <= ?) AS hitick ON avatars.character_graph = hitick.character_graph AND avatars.avatar_graph = hitick.avatar_graph AND avatars.avatar_node = hitick.avatar_node AND avatars.branch = hitick.branch AND avatars.tick = hitick.tick", "func_prereq_upd": "UPDATE prereq SET bytecode=? WHERE prereq.name = ?", "count_all_character_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_rules_handled.character AS character, character_rules_handled.rulebook AS rulebook, character_rules_handled.rule AS rule, character_rules_handled.branch AS branch, character_rules_handled.tick AS tick \nFROM character_rules_handled)", "count_all_character_portal_rules_handled": "SELECT count(character) AS tbl_row_count \nFROM (SELECT character_portal_rules_handled.character AS character, character_portal_rules_handled.rulebook AS rulebook, character_portal_rules_handled.rule AS rule, character_portal_rules_handled.branch AS branch, character_portal_rules_handled.tick AS tick \nFROM character_portal_rules_handled)", "index_character_place_rules_handled": "CREATE INDEX character_place_rules_handled_idx ON character_place_rules_handled (character, rulebook, rule)", "active_rule_avatar": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.branch, MAX(avatar_rules_handled.tick) AS tick \nFROM avatar_rules_handled \nWHERE avatar_rules_handled.character = ? AND avatar_rules_handled.rulebook = ? AND avatar_rules_handled.rule = ? AND avatar_rules_handled.branch = ? AND avatar_rules_handled.tick <= ? GROUP BY avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.branch) ON active_rules.rulebook = rulebook AND active_rules.rule = rule AND active_rules.branch = branch AND active_rules.tick = tick", "create_branches": "\nCREATE TABLE branches (\n\tbranch VARCHAR(50) NOT NULL, \n\tparent VARCHAR(50), \n\tparent_rev INTEGER, \n\tPRIMARY KEY (branch), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n", "del_char_avatars": "DELETE FROM avatars WHERE avatars.character_graph = ?", "func_function_upd": "UPDATE function SET bytecode=? WHERE function.name = ?", "sense_is_active": "SELECT senses.active \nFROM senses JOIN (SELECT senses.character AS character, senses.sense AS sense, senses.branch AS branch, MAX(senses.tick) AS tick \nFROM senses \nWHERE (senses.character IS NULL OR senses.character = ?) AND senses.tick <= ? AND senses.sense = ? AND senses.branch = ? GROUP BY senses.character, senses.sense, senses.branch) AS hitick ON senses.character = hitick.character AND senses.sense = hitick.sense AND senses.branch = hitick.branch AND senses.tick = hitick.tick", "count_all_characters": "SELECT count(character) AS tbl_row_count \nFROM (SELECT characters.character AS character, characters.character_rulebook AS character_rulebook, characters.avatar_rulebook AS avatar_rulebook, characters.character_thing_rulebook AS character_thing_rulebook, characters.character_place_rulebook AS character_place_rulebook, characters.character_portal_rulebook AS character_portal_rulebook \nFROM characters)", "multi_edges": "SELECT edges.idx, edges.extant \nFROM edges JOIN (SELECT edges.graph AS graph, edges.\"nodeA\" AS \"nodeA\", edges.\"nodeB\" AS \"nodeB\", edges.idx AS idx, edges.branch AS branch, MAX(edges.rev) AS rev \nFROM edges \nWHERE edges.graph = ? AND edges.\"nodeA\" = ? AND edges.\"nodeB\" = ? AND edges.branch = ? AND edges.rev <= ? GROUP BY edges.graph, edges.\"nodeA\", edges.\"nodeB\", edges.idx, edges.branch) AS hirev ON edges.graph = hirev.graph AND edges.\"nodeA\" = hirev.\"nodeA\" AND edges.\"nodeB\" = hirev.\"nodeB\" AND edges.idx = hirev.idx AND edges.branch = hirev.branch AND edges.rev = hirev.rev", "graph_val_items": "SELECT graph_val.\"key\", graph_val.value \nFROM graph_val JOIN (SELECT graph_val.graph AS graph, graph_val.\"key\" AS \"key\", graph_val.branch AS branch, MAX(graph_val.rev) AS rev \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND graph_val.rev <= ? GROUP BY graph_val.graph, graph_val.\"key\", graph_val.branch) AS hirev ON graph_val.graph = hirev.graph AND graph_val.\"key\" = hirev.\"key\" AND graph_val.branch = hirev.branch AND graph_val.rev = hirev.rev", "active_rule_character": "SELECT active_rules.active \nFROM active_rules JOIN (SELECT character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, MAX(character_rules_handled.tick) AS tick \nFROM character_rules_handled \nWHERE character_rules_handled.character = ? AND character_rules_handled.rulebook = ? AND character_rules_handled.rule = ? AND character_rules_handled.branch = ? AND character_rules_handled.tick <= ? GROUP BY character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch) ON active_rules.rulebook = rulebook AND active_rules.rule = rule AND active_rules.branch = branch AND active_rules.tick = tick", "avatar_upd": "UPDATE avatars SET is_avatar=? WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.tick = ?", "active_rules_rulebook": "SELECT active_rules.rule, active_rules.active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.rulebook = ? AND active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick", "node_is_thing": "SELECT things.location \nFROM things JOIN (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, MAX(things.tick) AS tick \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick <= ? GROUP BY things.character, things.thing, things.branch) AS hitick ON things.character = hitick.character AND things.thing = hitick.thing AND things.branch = hitick.branch AND things.tick = hitick.tick", "count_all_rules": "SELECT count(rule) AS tbl_row_count \nFROM (SELECT rules.rule AS rule, rules.actions AS actions, rules.prereqs AS prereqs, rules.triggers AS triggers \nFROM rules)", "avatars_ever": "SELECT avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.tick, avatars.is_avatar \nFROM avatars \nWHERE avatars.character_graph = ?", "ruledel": "DELETE FROM rules WHERE rules.rule = ?", "index_place_rules_handled": "CREATE INDEX place_rules_handled_idx ON place_rules_handled (character, place, rulebook, rule)", "poll_character_portal_rules": "SELECT characters.character, characters.character_portal_rulebook, curactrule.rule, curactrule.active, handle.handled \nFROM characters JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON characters.character_portal_rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = characters.character_portal_rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT character_portal_rules_handled.character AS character, character_portal_rules_handled.rulebook AS rulebook, character_portal_rules_handled.rule AS rule, \"1\" AS handled \nFROM character_portal_rules_handled \nWHERE character_portal_rules_handled.branch = ? AND character_portal_rules_handled.tick = ?) AS handle ON handle.character = characters.character AND handle.rulebook = characters.character_portal_rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY characters.character, rulebooks.rulebook, rulebooks.idx", "universal_upd": "UPDATE lise_globals SET value=? WHERE lise_globals.\"key\" = ? AND lise_globals.branch = ? AND lise_globals.tick = ?", "string_strings_upd": "UPDATE strings SET string=? WHERE strings.language = ? AND strings.id = ?", "rulebook_get_character_portal": "SELECT characters.character_portal_rulebook \nFROM characters \nWHERE characters.character = ?", "index_edge_val": "CREATE INDEX edge_val_idx ON edge_val (graph, \"nodeA\", \"nodeB\", idx, \"key\")", "poll_avatar_rules": "SELECT characters.character, characters.avatar_rulebook, curactrule.rule, curactrule.active, handle.handled \nFROM characters JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, active_rules.tick AS tick, active_rules.active AS active \nFROM active_rules JOIN (SELECT active_rules.rulebook AS rulebook, active_rules.rule AS rule, active_rules.branch AS branch, MAX(active_rules.tick) AS tick \nFROM active_rules \nWHERE active_rules.branch = ? AND active_rules.tick <= ? GROUP BY active_rules.rulebook, active_rules.rule, active_rules.branch) AS hitick ON active_rules.rulebook = hitick.rulebook AND active_rules.rule = hitick.rule AND active_rules.branch = hitick.branch AND active_rules.tick = hitick.tick) AS curactrule ON characters.avatar_rulebook = curactrule.rulebook LEFT OUTER JOIN rulebooks ON rulebooks.rulebook = characters.avatar_rulebook AND rulebooks.rule = curactrule.rule LEFT OUTER JOIN (SELECT avatar_rules_handled.character AS character, avatar_rules_handled.rulebook AS rulebook, avatar_rules_handled.rule AS rule, \"1\" AS handled \nFROM avatar_rules_handled \nWHERE avatar_rules_handled.branch = ? AND avatar_rules_handled.tick = ?) AS handle ON handle.character = characters.character AND handle.rulebook = characters.avatar_rulebook AND handle.rule = curactrule.rule \nWHERE handle.handled IS NULL ORDER BY characters.character, rulebooks.rulebook, rulebooks.idx", "count_all_edge_val": "SELECT count(graph) AS tbl_row_count \nFROM (SELECT edge_val.graph AS graph, edge_val.\"nodeA\" AS \"nodeA\", edge_val.\"nodeB\" AS \"nodeB\", edge_val.idx AS idx, edge_val.\"key\" AS \"key\", edge_val.branch AS branch, edge_val.rev AS rev, edge_val.value AS value \nFROM edge_val)", "thing_loc_and_next_get": "SELECT things.location, things.next_location \nFROM things JOIN (SELECT things.character AS character, things.thing AS thing, things.branch AS branch, MAX(things.tick) AS tick \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.tick <= ? GROUP BY things.character, things.thing, things.branch) AS hitick ON things.character = hitick.character AND things.thing = hitick.thing AND things.branch = hitick.branch AND things.tick = hitick.tick", "ctglobal": "SELECT COUNT(global.\"key\") AS \"COUNT_1\" \nFROM global", "count_all_global": "SELECT count(\"key\") AS tbl_row_count \nFROM (SELECT global.\"key\" AS \"key\", global.value AS value \nFROM global)", "arrival_time_get": "SELECT MAX(things.tick) AS \"MAX_1\" \nFROM things \nWHERE things.character = ? AND things.thing = ? AND things.location = ? AND things.branch = ? AND things.tick <= ?", "ctbranch": "SELECT COUNT(branches.branch) AS \"COUNT_1\" \nFROM branches \nWHERE branches.branch = ?", "func_action_del": "DELETE FROM action WHERE action.name = ?", "characters": "SELECT characters.character \nFROM characters", "create_travel_reqs": "\nCREATE TABLE travel_reqs (\n\tcharacter VARCHAR(50), \n\tbranch VARCHAR(50) NOT NULL, \n\ttick INTEGER NOT NULL, \n\treqs VARCHAR(50), \n\tPRIMARY KEY (character, branch, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph)\n)\n\n", "global_ins": "INSERT INTO global (\"key\", value) VALUES (?, ?)", "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph VARCHAR(50) NOT NULL, \n\t\"nodeA\" VARCHAR(50) NOT NULL, \n\t\"nodeB\" VARCHAR(50) NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" VARCHAR(50) NOT NULL, \n\tbranch VARCHAR(50) NOT NULL, \n\trev INTEGER NOT NULL, \n\tvalue VARCHAR(50), \n\tPRIMARY KEY (graph, \"nodeA\", \"nodeB\", idx, \"key\", branch, rev), \n\tFOREIGN KEY(graph, \"nodeA\", \"nodeB\", idx) REFERENCES edges (graph, \"nodeA\", \"nodeB\", idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n"}
